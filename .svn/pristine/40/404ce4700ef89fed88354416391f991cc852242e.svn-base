//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AutoCodeCrud {
		///<summary>Gets one AutoCode object from the database using the primary key.  Returns null if not found.</summary>
		internal static AutoCode SelectOne(long autoCodeNum){
			string command="SELECT * FROM autocode "
				+"WHERE AutoCodeNum = "+POut.Long(autoCodeNum);
			List<AutoCode> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AutoCode object from the database using a query.</summary>
		internal static AutoCode SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AutoCode> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AutoCode objects from the database using a query.</summary>
		internal static List<AutoCode> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AutoCode> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<AutoCode> TableToList(DataTable table){
			List<AutoCode> retVal=new List<AutoCode>();
			AutoCode autoCode;
			for(int i=0;i<table.Rows.Count;i++) {
				autoCode=new AutoCode();
				autoCode.AutoCodeNum  = PIn.Long  (table.Rows[i]["AutoCodeNum"].ToString());
				autoCode.Description  = PIn.String(table.Rows[i]["Description"].ToString());
				autoCode.IsHidden     = PIn.Bool  (table.Rows[i]["IsHidden"].ToString());
				autoCode.LessIntrusive= PIn.Bool  (table.Rows[i]["LessIntrusive"].ToString());
				retVal.Add(autoCode);
			}
			return retVal;
		}

		///<summary>Inserts one AutoCode into the database.  Returns the new priKey.</summary>
		internal static long Insert(AutoCode autoCode){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				autoCode.AutoCodeNum=DbHelper.GetNextOracleKey("autocode","AutoCodeNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(autoCode,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							autoCode.AutoCodeNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(autoCode,false);
			}
		}

		///<summary>Inserts one AutoCode into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(AutoCode autoCode,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				autoCode.AutoCodeNum=ReplicationServers.GetKey("autocode","AutoCodeNum");
			}
			string command="INSERT INTO autocode (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AutoCodeNum,";
			}
			command+="Description,IsHidden,LessIntrusive) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(autoCode.AutoCodeNum)+",";
			}
			command+=
				 "'"+POut.String(autoCode.Description)+"',"
				+    POut.Bool  (autoCode.IsHidden)+","
				+    POut.Bool  (autoCode.LessIntrusive)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoCode.AutoCodeNum=Db.NonQ(command,true);
			}
			return autoCode.AutoCodeNum;
		}

		///<summary>Updates one AutoCode in the database.</summary>
		internal static void Update(AutoCode autoCode){
			string command="UPDATE autocode SET "
				+"Description  = '"+POut.String(autoCode.Description)+"', "
				+"IsHidden     =  "+POut.Bool  (autoCode.IsHidden)+", "
				+"LessIntrusive=  "+POut.Bool  (autoCode.LessIntrusive)+" "
				+"WHERE AutoCodeNum = "+POut.Long(autoCode.AutoCodeNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AutoCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(AutoCode autoCode,AutoCode oldAutoCode){
			string command="";
			if(autoCode.Description != oldAutoCode.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(autoCode.Description)+"'";
			}
			if(autoCode.IsHidden != oldAutoCode.IsHidden) {
				if(command!=""){ command+=",";}
				command+="IsHidden = "+POut.Bool(autoCode.IsHidden)+"";
			}
			if(autoCode.LessIntrusive != oldAutoCode.LessIntrusive) {
				if(command!=""){ command+=",";}
				command+="LessIntrusive = "+POut.Bool(autoCode.LessIntrusive)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE autocode SET "+command
				+" WHERE AutoCodeNum = "+POut.Long(autoCode.AutoCodeNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AutoCode from the database.</summary>
		internal static void Delete(long autoCodeNum){
			string command="DELETE FROM autocode "
				+"WHERE AutoCodeNum = "+POut.Long(autoCodeNum);
			Db.NonQ(command);
		}

	}
}