//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AutomationCrud {
		///<summary>Gets one Automation object from the database using the primary key.  Returns null if not found.</summary>
		internal static Automation SelectOne(long automationNum){
			string command="SELECT * FROM automation "
				+"WHERE AutomationNum = "+POut.Long(automationNum);
			List<Automation> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Automation object from the database using a query.</summary>
		internal static Automation SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Automation> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Automation objects from the database using a query.</summary>
		internal static List<Automation> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Automation> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Automation> TableToList(DataTable table){
			List<Automation> retVal=new List<Automation>();
			Automation automation;
			for(int i=0;i<table.Rows.Count;i++) {
				automation=new Automation();
				automation.AutomationNum = PIn.Long  (table.Rows[i]["AutomationNum"].ToString());
				automation.Description   = PIn.String(table.Rows[i]["Description"].ToString());
				automation.Autotrigger   = (AutomationTrigger)PIn.Int(table.Rows[i]["Autotrigger"].ToString());
				automation.ProcCodes     = PIn.String(table.Rows[i]["ProcCodes"].ToString());
				automation.AutoAction    = (AutomationAction)PIn.Int(table.Rows[i]["AutoAction"].ToString());
				automation.SheetDefNum   = PIn.Long  (table.Rows[i]["SheetDefNum"].ToString());
				automation.CommType      = PIn.Long  (table.Rows[i]["CommType"].ToString());
				automation.MessageContent= PIn.String(table.Rows[i]["MessageContent"].ToString());
				retVal.Add(automation);
			}
			return retVal;
		}

		///<summary>Inserts one Automation into the database.  Returns the new priKey.</summary>
		internal static long Insert(Automation automation){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				automation.AutomationNum=DbHelper.GetNextOracleKey("automation","AutomationNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(automation,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							automation.AutomationNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(automation,false);
			}
		}

		///<summary>Inserts one Automation into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Automation automation,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				automation.AutomationNum=ReplicationServers.GetKey("automation","AutomationNum");
			}
			string command="INSERT INTO automation (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AutomationNum,";
			}
			command+="Description,Autotrigger,ProcCodes,AutoAction,SheetDefNum,CommType,MessageContent) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(automation.AutomationNum)+",";
			}
			command+=
				 "'"+POut.String(automation.Description)+"',"
				+    POut.Int   ((int)automation.Autotrigger)+","
				+"'"+POut.String(automation.ProcCodes)+"',"
				+    POut.Int   ((int)automation.AutoAction)+","
				+    POut.Long  (automation.SheetDefNum)+","
				+    POut.Long  (automation.CommType)+","
				+"'"+POut.String(automation.MessageContent)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				automation.AutomationNum=Db.NonQ(command,true);
			}
			return automation.AutomationNum;
		}

		///<summary>Updates one Automation in the database.</summary>
		internal static void Update(Automation automation){
			string command="UPDATE automation SET "
				+"Description   = '"+POut.String(automation.Description)+"', "
				+"Autotrigger   =  "+POut.Int   ((int)automation.Autotrigger)+", "
				+"ProcCodes     = '"+POut.String(automation.ProcCodes)+"', "
				+"AutoAction    =  "+POut.Int   ((int)automation.AutoAction)+", "
				+"SheetDefNum   =  "+POut.Long  (automation.SheetDefNum)+", "
				+"CommType      =  "+POut.Long  (automation.CommType)+", "
				+"MessageContent= '"+POut.String(automation.MessageContent)+"' "
				+"WHERE AutomationNum = "+POut.Long(automation.AutomationNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Automation in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Automation automation,Automation oldAutomation){
			string command="";
			if(automation.Description != oldAutomation.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(automation.Description)+"'";
			}
			if(automation.Autotrigger != oldAutomation.Autotrigger) {
				if(command!=""){ command+=",";}
				command+="Autotrigger = "+POut.Int   ((int)automation.Autotrigger)+"";
			}
			if(automation.ProcCodes != oldAutomation.ProcCodes) {
				if(command!=""){ command+=",";}
				command+="ProcCodes = '"+POut.String(automation.ProcCodes)+"'";
			}
			if(automation.AutoAction != oldAutomation.AutoAction) {
				if(command!=""){ command+=",";}
				command+="AutoAction = "+POut.Int   ((int)automation.AutoAction)+"";
			}
			if(automation.SheetDefNum != oldAutomation.SheetDefNum) {
				if(command!=""){ command+=",";}
				command+="SheetDefNum = "+POut.Long(automation.SheetDefNum)+"";
			}
			if(automation.CommType != oldAutomation.CommType) {
				if(command!=""){ command+=",";}
				command+="CommType = "+POut.Long(automation.CommType)+"";
			}
			if(automation.MessageContent != oldAutomation.MessageContent) {
				if(command!=""){ command+=",";}
				command+="MessageContent = '"+POut.String(automation.MessageContent)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE automation SET "+command
				+" WHERE AutomationNum = "+POut.Long(automation.AutomationNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Automation from the database.</summary>
		internal static void Delete(long automationNum){
			string command="DELETE FROM automation "
				+"WHERE AutomationNum = "+POut.Long(automationNum);
			Db.NonQ(command);
		}

	}
}