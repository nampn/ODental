//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AppointmentRuleCrud {
		///<summary>Gets one AppointmentRule object from the database using the primary key.  Returns null if not found.</summary>
		internal static AppointmentRule SelectOne(long appointmentRuleNum){
			string command="SELECT * FROM appointmentrule "
				+"WHERE AppointmentRuleNum = "+POut.Long(appointmentRuleNum);
			List<AppointmentRule> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AppointmentRule object from the database using a query.</summary>
		internal static AppointmentRule SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AppointmentRule> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AppointmentRule objects from the database using a query.</summary>
		internal static List<AppointmentRule> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AppointmentRule> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<AppointmentRule> TableToList(DataTable table){
			List<AppointmentRule> retVal=new List<AppointmentRule>();
			AppointmentRule appointmentRule;
			for(int i=0;i<table.Rows.Count;i++) {
				appointmentRule=new AppointmentRule();
				appointmentRule.AppointmentRuleNum= PIn.Long  (table.Rows[i]["AppointmentRuleNum"].ToString());
				appointmentRule.RuleDesc          = PIn.String(table.Rows[i]["RuleDesc"].ToString());
				appointmentRule.CodeStart         = PIn.String(table.Rows[i]["CodeStart"].ToString());
				appointmentRule.CodeEnd           = PIn.String(table.Rows[i]["CodeEnd"].ToString());
				appointmentRule.IsEnabled         = PIn.Bool  (table.Rows[i]["IsEnabled"].ToString());
				retVal.Add(appointmentRule);
			}
			return retVal;
		}

		///<summary>Inserts one AppointmentRule into the database.  Returns the new priKey.</summary>
		internal static long Insert(AppointmentRule appointmentRule){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				appointmentRule.AppointmentRuleNum=DbHelper.GetNextOracleKey("appointmentrule","AppointmentRuleNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(appointmentRule,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							appointmentRule.AppointmentRuleNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(appointmentRule,false);
			}
		}

		///<summary>Inserts one AppointmentRule into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(AppointmentRule appointmentRule,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				appointmentRule.AppointmentRuleNum=ReplicationServers.GetKey("appointmentrule","AppointmentRuleNum");
			}
			string command="INSERT INTO appointmentrule (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AppointmentRuleNum,";
			}
			command+="RuleDesc,CodeStart,CodeEnd,IsEnabled) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(appointmentRule.AppointmentRuleNum)+",";
			}
			command+=
				 "'"+POut.String(appointmentRule.RuleDesc)+"',"
				+"'"+POut.String(appointmentRule.CodeStart)+"',"
				+"'"+POut.String(appointmentRule.CodeEnd)+"',"
				+    POut.Bool  (appointmentRule.IsEnabled)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				appointmentRule.AppointmentRuleNum=Db.NonQ(command,true);
			}
			return appointmentRule.AppointmentRuleNum;
		}

		///<summary>Updates one AppointmentRule in the database.</summary>
		internal static void Update(AppointmentRule appointmentRule){
			string command="UPDATE appointmentrule SET "
				+"RuleDesc          = '"+POut.String(appointmentRule.RuleDesc)+"', "
				+"CodeStart         = '"+POut.String(appointmentRule.CodeStart)+"', "
				+"CodeEnd           = '"+POut.String(appointmentRule.CodeEnd)+"', "
				+"IsEnabled         =  "+POut.Bool  (appointmentRule.IsEnabled)+" "
				+"WHERE AppointmentRuleNum = "+POut.Long(appointmentRule.AppointmentRuleNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AppointmentRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(AppointmentRule appointmentRule,AppointmentRule oldAppointmentRule){
			string command="";
			if(appointmentRule.RuleDesc != oldAppointmentRule.RuleDesc) {
				if(command!=""){ command+=",";}
				command+="RuleDesc = '"+POut.String(appointmentRule.RuleDesc)+"'";
			}
			if(appointmentRule.CodeStart != oldAppointmentRule.CodeStart) {
				if(command!=""){ command+=",";}
				command+="CodeStart = '"+POut.String(appointmentRule.CodeStart)+"'";
			}
			if(appointmentRule.CodeEnd != oldAppointmentRule.CodeEnd) {
				if(command!=""){ command+=",";}
				command+="CodeEnd = '"+POut.String(appointmentRule.CodeEnd)+"'";
			}
			if(appointmentRule.IsEnabled != oldAppointmentRule.IsEnabled) {
				if(command!=""){ command+=",";}
				command+="IsEnabled = "+POut.Bool(appointmentRule.IsEnabled)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE appointmentrule SET "+command
				+" WHERE AppointmentRuleNum = "+POut.Long(appointmentRule.AppointmentRuleNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AppointmentRule from the database.</summary>
		internal static void Delete(long appointmentRuleNum){
			string command="DELETE FROM appointmentrule "
				+"WHERE AppointmentRuleNum = "+POut.Long(appointmentRuleNum);
			Db.NonQ(command);
		}

	}
}