//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ComputerCrud {
		///<summary>Gets one Computer object from the database using the primary key.  Returns null if not found.</summary>
		internal static Computer SelectOne(long computerNum){
			string command="SELECT * FROM computer "
				+"WHERE ComputerNum = "+POut.Long(computerNum);
			List<Computer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Computer object from the database using a query.</summary>
		internal static Computer SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Computer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Computer objects from the database using a query.</summary>
		internal static List<Computer> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Computer> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Computer> TableToList(DataTable table){
			List<Computer> retVal=new List<Computer>();
			Computer computer;
			for(int i=0;i<table.Rows.Count;i++) {
				computer=new Computer();
				computer.ComputerNum  = PIn.Long  (table.Rows[i]["ComputerNum"].ToString());
				computer.CompName     = PIn.String(table.Rows[i]["CompName"].ToString());
				computer.LastHeartBeat= PIn.DateT (table.Rows[i]["LastHeartBeat"].ToString());
				retVal.Add(computer);
			}
			return retVal;
		}

		///<summary>Inserts one Computer into the database.  Returns the new priKey.</summary>
		internal static long Insert(Computer computer){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				computer.ComputerNum=DbHelper.GetNextOracleKey("computer","ComputerNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(computer,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							computer.ComputerNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(computer,false);
			}
		}

		///<summary>Inserts one Computer into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Computer computer,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				computer.ComputerNum=ReplicationServers.GetKey("computer","ComputerNum");
			}
			string command="INSERT INTO computer (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ComputerNum,";
			}
			command+="CompName,LastHeartBeat) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(computer.ComputerNum)+",";
			}
			command+=
				 "'"+POut.String(computer.CompName)+"',"
				+    POut.DateT (computer.LastHeartBeat)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				computer.ComputerNum=Db.NonQ(command,true);
			}
			return computer.ComputerNum;
		}

		///<summary>Updates one Computer in the database.</summary>
		internal static void Update(Computer computer){
			string command="UPDATE computer SET "
				+"CompName     = '"+POut.String(computer.CompName)+"', "
				+"LastHeartBeat=  "+POut.DateT (computer.LastHeartBeat)+" "
				+"WHERE ComputerNum = "+POut.Long(computer.ComputerNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Computer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Computer computer,Computer oldComputer){
			string command="";
			if(computer.CompName != oldComputer.CompName) {
				if(command!=""){ command+=",";}
				command+="CompName = '"+POut.String(computer.CompName)+"'";
			}
			if(computer.LastHeartBeat != oldComputer.LastHeartBeat) {
				if(command!=""){ command+=",";}
				command+="LastHeartBeat = "+POut.DateT(computer.LastHeartBeat)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE computer SET "+command
				+" WHERE ComputerNum = "+POut.Long(computer.ComputerNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Computer from the database.</summary>
		internal static void Delete(long computerNum){
			string command="DELETE FROM computer "
				+"WHERE ComputerNum = "+POut.Long(computerNum);
			Db.NonQ(command);
		}

	}
}