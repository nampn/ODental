using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using System.Text;
using System.Xml;

namespace OpenDentBusiness {
	///<summary></summary>
	public class DataCore {
		///<summary></summary>
		public static DataTable GetTable(string command) {
			DataConnection dcon=new DataConnection();
			DataTable table=dcon.GetTable(command);
			//DataSet retVal=new DataSet();
			//table.TableName="table";
			//retVal.Tables.Add(table);
			//retVal.Tables[0].TableName="";
			return table;//retVal;
		}

		///<summary>Only used if using the server component.  This is used for queries written by the user.  It uses the user with lower privileges  to prevent injection attack.</summary>
		public static DataTable GetTableLow(string command) {
			DataConnection dcon=new DataConnection(true);
			DataTable table=dcon.GetTable(command);
			//DataSet retVal=new DataSet();
			//retVal.Tables.Add(table);
			return table;
		}

		///<summary>This query is run with full privileges.  This is for commands generated by the main program, and the user will not have access for injection attacks.  Result is usually number of rows changed, or can be insert id if requested.</summary>
		public static long NonQ(string command,bool getInsertID,params OdSqlParameter[] parameters) {
			DataConnection dcon=new DataConnection();
			long rowsChanged=dcon.NonQ(command,getInsertID,parameters);
			if(getInsertID){
				return (long)dcon.InsertID;
			}
			else{
				return rowsChanged;
			}
		}

		public static long NonQ(string command,params OdSqlParameter[] parameters) {
			return NonQ(command,false,parameters);
		}

		/*
		///<summary>This is for multiple queries all concatenated together with ;</summary>
		public static DataSet GetDataSet(string commands){
			DataConnection dcon=new DataConnection();
			//DataTable table=dcon.GetTable(command);
			DataSet retVal=dcon.GetDs(commands);
			//retVal.Tables.Add(table);
			return retVal;
		}*/

		///<summary>Get one single value.</summary>
		public static string GetScalar(string command) {
			DataConnection dcon=new DataConnection();
			return dcon.GetScalar(command);
		}

	

	}

	
}
