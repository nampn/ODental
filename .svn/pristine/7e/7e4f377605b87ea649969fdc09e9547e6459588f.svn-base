//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ComputerPrefCrud {
		///<summary>Gets one ComputerPref object from the database using the primary key.  Returns null if not found.</summary>
		internal static ComputerPref SelectOne(long computerPrefNum){
			string command="SELECT * FROM computerpref "
				+"WHERE ComputerPrefNum = "+POut.Long(computerPrefNum);
			List<ComputerPref> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ComputerPref object from the database using a query.</summary>
		internal static ComputerPref SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ComputerPref> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ComputerPref objects from the database using a query.</summary>
		internal static List<ComputerPref> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ComputerPref> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<ComputerPref> TableToList(DataTable table){
			List<ComputerPref> retVal=new List<ComputerPref>();
			ComputerPref computerPref;
			for(int i=0;i<table.Rows.Count;i++) {
				computerPref=new ComputerPref();
				computerPref.ComputerPrefNum        = PIn.Long  (table.Rows[i]["ComputerPrefNum"].ToString());
				computerPref.ComputerName           = PIn.String(table.Rows[i]["ComputerName"].ToString());
				computerPref.GraphicsUseHardware    = PIn.Bool  (table.Rows[i]["GraphicsUseHardware"].ToString());
				computerPref.GraphicsSimple         = (DrawingMode)PIn.Int(table.Rows[i]["GraphicsSimple"].ToString());
				computerPref.SensorType             = PIn.String(table.Rows[i]["SensorType"].ToString());
				computerPref.SensorBinned           = PIn.Bool  (table.Rows[i]["SensorBinned"].ToString());
				computerPref.SensorPort             = PIn.Int   (table.Rows[i]["SensorPort"].ToString());
				computerPref.SensorExposure         = PIn.Int   (table.Rows[i]["SensorExposure"].ToString());
				computerPref.GraphicsDoubleBuffering= PIn.Bool  (table.Rows[i]["GraphicsDoubleBuffering"].ToString());
				computerPref.PreferredPixelFormatNum= PIn.Int   (table.Rows[i]["PreferredPixelFormatNum"].ToString());
				computerPref.AtoZpath               = PIn.String(table.Rows[i]["AtoZpath"].ToString());
				computerPref.TaskKeepListHidden     = PIn.Bool  (table.Rows[i]["TaskKeepListHidden"].ToString());
				computerPref.TaskDock               = PIn.Int   (table.Rows[i]["TaskDock"].ToString());
				computerPref.TaskX                  = PIn.Int   (table.Rows[i]["TaskX"].ToString());
				computerPref.TaskY                  = PIn.Int   (table.Rows[i]["TaskY"].ToString());
				computerPref.DirectXFormat          = PIn.String(table.Rows[i]["DirectXFormat"].ToString());
				computerPref.RecentApptView         = PIn.Byte  (table.Rows[i]["RecentApptView"].ToString());
				retVal.Add(computerPref);
			}
			return retVal;
		}

		///<summary>Inserts one ComputerPref into the database.  Returns the new priKey.</summary>
		internal static long Insert(ComputerPref computerPref){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				computerPref.ComputerPrefNum=DbHelper.GetNextOracleKey("computerpref","ComputerPrefNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(computerPref,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							computerPref.ComputerPrefNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(computerPref,false);
			}
		}

		///<summary>Inserts one ComputerPref into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(ComputerPref computerPref,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				computerPref.ComputerPrefNum=ReplicationServers.GetKey("computerpref","ComputerPrefNum");
			}
			string command="INSERT INTO computerpref (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ComputerPrefNum,";
			}
			command+="ComputerName,GraphicsUseHardware,GraphicsSimple,SensorType,SensorBinned,SensorPort,SensorExposure,GraphicsDoubleBuffering,PreferredPixelFormatNum,AtoZpath,TaskKeepListHidden,TaskDock,TaskX,TaskY,DirectXFormat,RecentApptView) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(computerPref.ComputerPrefNum)+",";
			}
			command+=
				 "'"+POut.String(computerPref.ComputerName)+"',"
				+    POut.Bool  (computerPref.GraphicsUseHardware)+","
				+    POut.Int   ((int)computerPref.GraphicsSimple)+","
				+"'"+POut.String(computerPref.SensorType)+"',"
				+    POut.Bool  (computerPref.SensorBinned)+","
				+    POut.Int   (computerPref.SensorPort)+","
				+    POut.Int   (computerPref.SensorExposure)+","
				+    POut.Bool  (computerPref.GraphicsDoubleBuffering)+","
				+    POut.Int   (computerPref.PreferredPixelFormatNum)+","
				+"'"+POut.String(computerPref.AtoZpath)+"',"
				+    POut.Bool  (computerPref.TaskKeepListHidden)+","
				+    POut.Int   (computerPref.TaskDock)+","
				+    POut.Int   (computerPref.TaskX)+","
				+    POut.Int   (computerPref.TaskY)+","
				+"'"+POut.String(computerPref.DirectXFormat)+"',"
				+    POut.Byte  (computerPref.RecentApptView)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				computerPref.ComputerPrefNum=Db.NonQ(command,true);
			}
			return computerPref.ComputerPrefNum;
		}

		///<summary>Updates one ComputerPref in the database.</summary>
		internal static void Update(ComputerPref computerPref){
			string command="UPDATE computerpref SET "
				+"ComputerName           = '"+POut.String(computerPref.ComputerName)+"', "
				+"GraphicsUseHardware    =  "+POut.Bool  (computerPref.GraphicsUseHardware)+", "
				+"GraphicsSimple         =  "+POut.Int   ((int)computerPref.GraphicsSimple)+", "
				+"SensorType             = '"+POut.String(computerPref.SensorType)+"', "
				+"SensorBinned           =  "+POut.Bool  (computerPref.SensorBinned)+", "
				+"SensorPort             =  "+POut.Int   (computerPref.SensorPort)+", "
				+"SensorExposure         =  "+POut.Int   (computerPref.SensorExposure)+", "
				+"GraphicsDoubleBuffering=  "+POut.Bool  (computerPref.GraphicsDoubleBuffering)+", "
				+"PreferredPixelFormatNum=  "+POut.Int   (computerPref.PreferredPixelFormatNum)+", "
				+"AtoZpath               = '"+POut.String(computerPref.AtoZpath)+"', "
				+"TaskKeepListHidden     =  "+POut.Bool  (computerPref.TaskKeepListHidden)+", "
				+"TaskDock               =  "+POut.Int   (computerPref.TaskDock)+", "
				+"TaskX                  =  "+POut.Int   (computerPref.TaskX)+", "
				+"TaskY                  =  "+POut.Int   (computerPref.TaskY)+", "
				+"DirectXFormat          = '"+POut.String(computerPref.DirectXFormat)+"', "
				+"RecentApptView         =  "+POut.Byte  (computerPref.RecentApptView)+" "
				+"WHERE ComputerPrefNum = "+POut.Long(computerPref.ComputerPrefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ComputerPref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(ComputerPref computerPref,ComputerPref oldComputerPref){
			string command="";
			if(computerPref.ComputerName != oldComputerPref.ComputerName) {
				if(command!=""){ command+=",";}
				command+="ComputerName = '"+POut.String(computerPref.ComputerName)+"'";
			}
			if(computerPref.GraphicsUseHardware != oldComputerPref.GraphicsUseHardware) {
				if(command!=""){ command+=",";}
				command+="GraphicsUseHardware = "+POut.Bool(computerPref.GraphicsUseHardware)+"";
			}
			if(computerPref.GraphicsSimple != oldComputerPref.GraphicsSimple) {
				if(command!=""){ command+=",";}
				command+="GraphicsSimple = "+POut.Int   ((int)computerPref.GraphicsSimple)+"";
			}
			if(computerPref.SensorType != oldComputerPref.SensorType) {
				if(command!=""){ command+=",";}
				command+="SensorType = '"+POut.String(computerPref.SensorType)+"'";
			}
			if(computerPref.SensorBinned != oldComputerPref.SensorBinned) {
				if(command!=""){ command+=",";}
				command+="SensorBinned = "+POut.Bool(computerPref.SensorBinned)+"";
			}
			if(computerPref.SensorPort != oldComputerPref.SensorPort) {
				if(command!=""){ command+=",";}
				command+="SensorPort = "+POut.Int(computerPref.SensorPort)+"";
			}
			if(computerPref.SensorExposure != oldComputerPref.SensorExposure) {
				if(command!=""){ command+=",";}
				command+="SensorExposure = "+POut.Int(computerPref.SensorExposure)+"";
			}
			if(computerPref.GraphicsDoubleBuffering != oldComputerPref.GraphicsDoubleBuffering) {
				if(command!=""){ command+=",";}
				command+="GraphicsDoubleBuffering = "+POut.Bool(computerPref.GraphicsDoubleBuffering)+"";
			}
			if(computerPref.PreferredPixelFormatNum != oldComputerPref.PreferredPixelFormatNum) {
				if(command!=""){ command+=",";}
				command+="PreferredPixelFormatNum = "+POut.Int(computerPref.PreferredPixelFormatNum)+"";
			}
			if(computerPref.AtoZpath != oldComputerPref.AtoZpath) {
				if(command!=""){ command+=",";}
				command+="AtoZpath = '"+POut.String(computerPref.AtoZpath)+"'";
			}
			if(computerPref.TaskKeepListHidden != oldComputerPref.TaskKeepListHidden) {
				if(command!=""){ command+=",";}
				command+="TaskKeepListHidden = "+POut.Bool(computerPref.TaskKeepListHidden)+"";
			}
			if(computerPref.TaskDock != oldComputerPref.TaskDock) {
				if(command!=""){ command+=",";}
				command+="TaskDock = "+POut.Int(computerPref.TaskDock)+"";
			}
			if(computerPref.TaskX != oldComputerPref.TaskX) {
				if(command!=""){ command+=",";}
				command+="TaskX = "+POut.Int(computerPref.TaskX)+"";
			}
			if(computerPref.TaskY != oldComputerPref.TaskY) {
				if(command!=""){ command+=",";}
				command+="TaskY = "+POut.Int(computerPref.TaskY)+"";
			}
			if(computerPref.DirectXFormat != oldComputerPref.DirectXFormat) {
				if(command!=""){ command+=",";}
				command+="DirectXFormat = '"+POut.String(computerPref.DirectXFormat)+"'";
			}
			if(computerPref.RecentApptView != oldComputerPref.RecentApptView) {
				if(command!=""){ command+=",";}
				command+="RecentApptView = "+POut.Byte(computerPref.RecentApptView)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE computerpref SET "+command
				+" WHERE ComputerPrefNum = "+POut.Long(computerPref.ComputerPrefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one ComputerPref from the database.</summary>
		internal static void Delete(long computerPrefNum){
			string command="DELETE FROM computerpref "
				+"WHERE ComputerPrefNum = "+POut.Long(computerPrefNum);
			Db.NonQ(command);
		}

	}
}