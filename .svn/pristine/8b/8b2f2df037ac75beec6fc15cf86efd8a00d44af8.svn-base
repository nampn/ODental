//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class EhrSummaryCcdCrud {
		///<summary>Gets one EhrSummaryCcd object from the database using the primary key.  Returns null if not found.</summary>
		internal static EhrSummaryCcd SelectOne(long ehrSummaryCcdNum){
			string command="SELECT * FROM ehrsummaryccd "
				+"WHERE EhrSummaryCcdNum = "+POut.Long(ehrSummaryCcdNum);
			List<EhrSummaryCcd> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EhrSummaryCcd object from the database using a query.</summary>
		internal static EhrSummaryCcd SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrSummaryCcd> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EhrSummaryCcd objects from the database using a query.</summary>
		internal static List<EhrSummaryCcd> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrSummaryCcd> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<EhrSummaryCcd> TableToList(DataTable table){
			List<EhrSummaryCcd> retVal=new List<EhrSummaryCcd>();
			EhrSummaryCcd ehrSummaryCcd;
			for(int i=0;i<table.Rows.Count;i++) {
				ehrSummaryCcd=new EhrSummaryCcd();
				ehrSummaryCcd.EhrSummaryCcdNum= PIn.Long  (table.Rows[i]["EhrSummaryCcdNum"].ToString());
				ehrSummaryCcd.PatNum          = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				ehrSummaryCcd.DateSummary     = PIn.Date  (table.Rows[i]["DateSummary"].ToString());
				ehrSummaryCcd.ContentSummary  = PIn.String(table.Rows[i]["ContentSummary"].ToString());
				retVal.Add(ehrSummaryCcd);
			}
			return retVal;
		}

		///<summary>Inserts one EhrSummaryCcd into the database.  Returns the new priKey.</summary>
		internal static long Insert(EhrSummaryCcd ehrSummaryCcd){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				ehrSummaryCcd.EhrSummaryCcdNum=DbHelper.GetNextOracleKey("ehrsummaryccd","EhrSummaryCcdNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(ehrSummaryCcd,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							ehrSummaryCcd.EhrSummaryCcdNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(ehrSummaryCcd,false);
			}
		}

		///<summary>Inserts one EhrSummaryCcd into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(EhrSummaryCcd ehrSummaryCcd,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				ehrSummaryCcd.EhrSummaryCcdNum=ReplicationServers.GetKey("ehrsummaryccd","EhrSummaryCcdNum");
			}
			string command="INSERT INTO ehrsummaryccd (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EhrSummaryCcdNum,";
			}
			command+="PatNum,DateSummary,ContentSummary) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(ehrSummaryCcd.EhrSummaryCcdNum)+",";
			}
			command+=
				     POut.Long  (ehrSummaryCcd.PatNum)+","
				+    POut.Date  (ehrSummaryCcd.DateSummary)+","
				+DbHelper.ParamChar+"paramContentSummary)";
			if(ehrSummaryCcd.ContentSummary==null) {
				ehrSummaryCcd.ContentSummary="";
			}
			OdSqlParameter paramContentSummary=new OdSqlParameter("paramContentSummary",OdDbType.Text,ehrSummaryCcd.ContentSummary);
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramContentSummary);
			}
			else {
				ehrSummaryCcd.EhrSummaryCcdNum=Db.NonQ(command,true,paramContentSummary);
			}
			return ehrSummaryCcd.EhrSummaryCcdNum;
		}

		///<summary>Updates one EhrSummaryCcd in the database.</summary>
		internal static void Update(EhrSummaryCcd ehrSummaryCcd){
			string command="UPDATE ehrsummaryccd SET "
				+"PatNum          =  "+POut.Long  (ehrSummaryCcd.PatNum)+", "
				+"DateSummary     =  "+POut.Date  (ehrSummaryCcd.DateSummary)+", "
				+"ContentSummary  =  "+DbHelper.ParamChar+"paramContentSummary "
				+"WHERE EhrSummaryCcdNum = "+POut.Long(ehrSummaryCcd.EhrSummaryCcdNum);
			if(ehrSummaryCcd.ContentSummary==null) {
				ehrSummaryCcd.ContentSummary="";
			}
			OdSqlParameter paramContentSummary=new OdSqlParameter("paramContentSummary",OdDbType.Text,ehrSummaryCcd.ContentSummary);
			Db.NonQ(command,paramContentSummary);
		}

		///<summary>Updates one EhrSummaryCcd in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(EhrSummaryCcd ehrSummaryCcd,EhrSummaryCcd oldEhrSummaryCcd){
			string command="";
			if(ehrSummaryCcd.PatNum != oldEhrSummaryCcd.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(ehrSummaryCcd.PatNum)+"";
			}
			if(ehrSummaryCcd.DateSummary != oldEhrSummaryCcd.DateSummary) {
				if(command!=""){ command+=",";}
				command+="DateSummary = "+POut.Date(ehrSummaryCcd.DateSummary)+"";
			}
			if(ehrSummaryCcd.ContentSummary != oldEhrSummaryCcd.ContentSummary) {
				if(command!=""){ command+=",";}
				command+="ContentSummary = "+DbHelper.ParamChar+"paramContentSummary";
			}
			if(command==""){
				return;
			}
			if(ehrSummaryCcd.ContentSummary==null) {
				ehrSummaryCcd.ContentSummary="";
			}
			OdSqlParameter paramContentSummary=new OdSqlParameter("paramContentSummary",OdDbType.Text,ehrSummaryCcd.ContentSummary);
			command="UPDATE ehrsummaryccd SET "+command
				+" WHERE EhrSummaryCcdNum = "+POut.Long(ehrSummaryCcd.EhrSummaryCcdNum);
			Db.NonQ(command,paramContentSummary);
		}

		///<summary>Deletes one EhrSummaryCcd from the database.</summary>
		internal static void Delete(long ehrSummaryCcdNum){
			string command="DELETE FROM ehrsummaryccd "
				+"WHERE EhrSummaryCcdNum = "+POut.Long(ehrSummaryCcdNum);
			Db.NonQ(command);
		}

	}
}