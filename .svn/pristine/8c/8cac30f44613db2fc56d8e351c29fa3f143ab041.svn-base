//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class EhrMeasureEventCrud {
		///<summary>Gets one EhrMeasureEvent object from the database using the primary key.  Returns null if not found.</summary>
		internal static EhrMeasureEvent SelectOne(long ehrMeasureEventNum){
			string command="SELECT * FROM ehrmeasureevent "
				+"WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEventNum);
			List<EhrMeasureEvent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EhrMeasureEvent object from the database using a query.</summary>
		internal static EhrMeasureEvent SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrMeasureEvent> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EhrMeasureEvent objects from the database using a query.</summary>
		internal static List<EhrMeasureEvent> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrMeasureEvent> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<EhrMeasureEvent> TableToList(DataTable table){
			List<EhrMeasureEvent> retVal=new List<EhrMeasureEvent>();
			EhrMeasureEvent ehrMeasureEvent;
			for(int i=0;i<table.Rows.Count;i++) {
				ehrMeasureEvent=new EhrMeasureEvent();
				ehrMeasureEvent.EhrMeasureEventNum= PIn.Long  (table.Rows[i]["EhrMeasureEventNum"].ToString());
				ehrMeasureEvent.DateTEvent        = PIn.DateT (table.Rows[i]["DateTEvent"].ToString());
				ehrMeasureEvent.EventType         = (EhrMeasureEventType)PIn.Int(table.Rows[i]["EventType"].ToString());
				ehrMeasureEvent.PatNum            = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				ehrMeasureEvent.MoreInfo          = PIn.String(table.Rows[i]["MoreInfo"].ToString());
				retVal.Add(ehrMeasureEvent);
			}
			return retVal;
		}

		///<summary>Inserts one EhrMeasureEvent into the database.  Returns the new priKey.</summary>
		internal static long Insert(EhrMeasureEvent ehrMeasureEvent){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				ehrMeasureEvent.EhrMeasureEventNum=DbHelper.GetNextOracleKey("ehrmeasureevent","EhrMeasureEventNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(ehrMeasureEvent,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							ehrMeasureEvent.EhrMeasureEventNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(ehrMeasureEvent,false);
			}
		}

		///<summary>Inserts one EhrMeasureEvent into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(EhrMeasureEvent ehrMeasureEvent,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				ehrMeasureEvent.EhrMeasureEventNum=ReplicationServers.GetKey("ehrmeasureevent","EhrMeasureEventNum");
			}
			string command="INSERT INTO ehrmeasureevent (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EhrMeasureEventNum,";
			}
			command+="DateTEvent,EventType,PatNum,MoreInfo) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(ehrMeasureEvent.EhrMeasureEventNum)+",";
			}
			command+=
				     POut.DateT (ehrMeasureEvent.DateTEvent)+","
				+    POut.Int   ((int)ehrMeasureEvent.EventType)+","
				+    POut.Long  (ehrMeasureEvent.PatNum)+","
				+"'"+POut.String(ehrMeasureEvent.MoreInfo)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				ehrMeasureEvent.EhrMeasureEventNum=Db.NonQ(command,true);
			}
			return ehrMeasureEvent.EhrMeasureEventNum;
		}

		///<summary>Updates one EhrMeasureEvent in the database.</summary>
		internal static void Update(EhrMeasureEvent ehrMeasureEvent){
			string command="UPDATE ehrmeasureevent SET "
				+"DateTEvent        =  "+POut.DateT (ehrMeasureEvent.DateTEvent)+", "
				+"EventType         =  "+POut.Int   ((int)ehrMeasureEvent.EventType)+", "
				+"PatNum            =  "+POut.Long  (ehrMeasureEvent.PatNum)+", "
				+"MoreInfo          = '"+POut.String(ehrMeasureEvent.MoreInfo)+"' "
				+"WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEvent.EhrMeasureEventNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EhrMeasureEvent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(EhrMeasureEvent ehrMeasureEvent,EhrMeasureEvent oldEhrMeasureEvent){
			string command="";
			if(ehrMeasureEvent.DateTEvent != oldEhrMeasureEvent.DateTEvent) {
				if(command!=""){ command+=",";}
				command+="DateTEvent = "+POut.DateT(ehrMeasureEvent.DateTEvent)+"";
			}
			if(ehrMeasureEvent.EventType != oldEhrMeasureEvent.EventType) {
				if(command!=""){ command+=",";}
				command+="EventType = "+POut.Int   ((int)ehrMeasureEvent.EventType)+"";
			}
			if(ehrMeasureEvent.PatNum != oldEhrMeasureEvent.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(ehrMeasureEvent.PatNum)+"";
			}
			if(ehrMeasureEvent.MoreInfo != oldEhrMeasureEvent.MoreInfo) {
				if(command!=""){ command+=",";}
				command+="MoreInfo = '"+POut.String(ehrMeasureEvent.MoreInfo)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE ehrmeasureevent SET "+command
				+" WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEvent.EhrMeasureEventNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one EhrMeasureEvent from the database.</summary>
		internal static void Delete(long ehrMeasureEventNum){
			string command="DELETE FROM ehrmeasureevent "
				+"WHERE EhrMeasureEventNum = "+POut.Long(ehrMeasureEventNum);
			Db.NonQ(command);
		}

	}
}