//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class EmailTemplateCrud {
		///<summary>Gets one EmailTemplate object from the database using the primary key.  Returns null if not found.</summary>
		internal static EmailTemplate SelectOne(long emailTemplateNum){
			string command="SELECT * FROM emailtemplate "
				+"WHERE EmailTemplateNum = "+POut.Long(emailTemplateNum);
			List<EmailTemplate> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EmailTemplate object from the database using a query.</summary>
		internal static EmailTemplate SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailTemplate> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EmailTemplate objects from the database using a query.</summary>
		internal static List<EmailTemplate> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailTemplate> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<EmailTemplate> TableToList(DataTable table){
			List<EmailTemplate> retVal=new List<EmailTemplate>();
			EmailTemplate emailTemplate;
			for(int i=0;i<table.Rows.Count;i++) {
				emailTemplate=new EmailTemplate();
				emailTemplate.EmailTemplateNum= PIn.Long  (table.Rows[i]["EmailTemplateNum"].ToString());
				emailTemplate.Subject         = PIn.String(table.Rows[i]["Subject"].ToString());
				emailTemplate.BodyText        = PIn.String(table.Rows[i]["BodyText"].ToString());
				retVal.Add(emailTemplate);
			}
			return retVal;
		}

		///<summary>Inserts one EmailTemplate into the database.  Returns the new priKey.</summary>
		internal static long Insert(EmailTemplate emailTemplate){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				emailTemplate.EmailTemplateNum=DbHelper.GetNextOracleKey("emailtemplate","EmailTemplateNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(emailTemplate,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							emailTemplate.EmailTemplateNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(emailTemplate,false);
			}
		}

		///<summary>Inserts one EmailTemplate into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(EmailTemplate emailTemplate,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				emailTemplate.EmailTemplateNum=ReplicationServers.GetKey("emailtemplate","EmailTemplateNum");
			}
			string command="INSERT INTO emailtemplate (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmailTemplateNum,";
			}
			command+="Subject,BodyText) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(emailTemplate.EmailTemplateNum)+",";
			}
			command+=
				 "'"+POut.String(emailTemplate.Subject)+"',"
				+"'"+POut.String(emailTemplate.BodyText)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				emailTemplate.EmailTemplateNum=Db.NonQ(command,true);
			}
			return emailTemplate.EmailTemplateNum;
		}

		///<summary>Updates one EmailTemplate in the database.</summary>
		internal static void Update(EmailTemplate emailTemplate){
			string command="UPDATE emailtemplate SET "
				+"Subject         = '"+POut.String(emailTemplate.Subject)+"', "
				+"BodyText        = '"+POut.String(emailTemplate.BodyText)+"' "
				+"WHERE EmailTemplateNum = "+POut.Long(emailTemplate.EmailTemplateNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EmailTemplate in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(EmailTemplate emailTemplate,EmailTemplate oldEmailTemplate){
			string command="";
			if(emailTemplate.Subject != oldEmailTemplate.Subject) {
				if(command!=""){ command+=",";}
				command+="Subject = '"+POut.String(emailTemplate.Subject)+"'";
			}
			if(emailTemplate.BodyText != oldEmailTemplate.BodyText) {
				if(command!=""){ command+=",";}
				command+="BodyText = '"+POut.String(emailTemplate.BodyText)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE emailtemplate SET "+command
				+" WHERE EmailTemplateNum = "+POut.Long(emailTemplate.EmailTemplateNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one EmailTemplate from the database.</summary>
		internal static void Delete(long emailTemplateNum){
			string command="DELETE FROM emailtemplate "
				+"WHERE EmailTemplateNum = "+POut.Long(emailTemplateNum);
			Db.NonQ(command);
		}

	}
}