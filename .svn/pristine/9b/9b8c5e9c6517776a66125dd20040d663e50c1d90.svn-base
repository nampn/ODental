//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AdjustmentCrud {
		///<summary>Gets one Adjustment object from the database using the primary key.  Returns null if not found.</summary>
		internal static Adjustment SelectOne(long adjNum){
			string command="SELECT * FROM adjustment "
				+"WHERE AdjNum = "+POut.Long(adjNum);
			List<Adjustment> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Adjustment object from the database using a query.</summary>
		internal static Adjustment SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Adjustment> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Adjustment objects from the database using a query.</summary>
		internal static List<Adjustment> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Adjustment> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Adjustment> TableToList(DataTable table){
			List<Adjustment> retVal=new List<Adjustment>();
			Adjustment adjustment;
			for(int i=0;i<table.Rows.Count;i++) {
				adjustment=new Adjustment();
				adjustment.AdjNum   = PIn.Long  (table.Rows[i]["AdjNum"].ToString());
				adjustment.AdjDate  = PIn.Date  (table.Rows[i]["AdjDate"].ToString());
				adjustment.AdjAmt   = PIn.Double(table.Rows[i]["AdjAmt"].ToString());
				adjustment.PatNum   = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				adjustment.AdjType  = PIn.Long  (table.Rows[i]["AdjType"].ToString());
				adjustment.ProvNum  = PIn.Long  (table.Rows[i]["ProvNum"].ToString());
				adjustment.AdjNote  = PIn.String(table.Rows[i]["AdjNote"].ToString());
				adjustment.ProcDate = PIn.Date  (table.Rows[i]["ProcDate"].ToString());
				adjustment.ProcNum  = PIn.Long  (table.Rows[i]["ProcNum"].ToString());
				adjustment.DateEntry= PIn.Date  (table.Rows[i]["DateEntry"].ToString());
				adjustment.ClinicNum= PIn.Long  (table.Rows[i]["ClinicNum"].ToString());
				retVal.Add(adjustment);
			}
			return retVal;
		}

		///<summary>Inserts one Adjustment into the database.  Returns the new priKey.</summary>
		internal static long Insert(Adjustment adjustment){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				adjustment.AdjNum=DbHelper.GetNextOracleKey("adjustment","AdjNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(adjustment,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							adjustment.AdjNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(adjustment,false);
			}
		}

		///<summary>Inserts one Adjustment into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Adjustment adjustment,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				adjustment.AdjNum=ReplicationServers.GetKey("adjustment","AdjNum");
			}
			string command="INSERT INTO adjustment (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AdjNum,";
			}
			command+="AdjDate,AdjAmt,PatNum,AdjType,ProvNum,AdjNote,ProcDate,ProcNum,DateEntry,ClinicNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(adjustment.AdjNum)+",";
			}
			command+=
				     POut.Date  (adjustment.AdjDate)+","
				+"'"+POut.Double(adjustment.AdjAmt)+"',"
				+    POut.Long  (adjustment.PatNum)+","
				+    POut.Long  (adjustment.AdjType)+","
				+    POut.Long  (adjustment.ProvNum)+","
				+"'"+POut.String(adjustment.AdjNote)+"',"
				+    POut.Date  (adjustment.ProcDate)+","
				+    POut.Long  (adjustment.ProcNum)+","
				+    DbHelper.Now()+","
				+    POut.Long  (adjustment.ClinicNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				adjustment.AdjNum=Db.NonQ(command,true);
			}
			return adjustment.AdjNum;
		}

		///<summary>Updates one Adjustment in the database.</summary>
		internal static void Update(Adjustment adjustment){
			string command="UPDATE adjustment SET "
				+"AdjDate  =  "+POut.Date  (adjustment.AdjDate)+", "
				+"AdjAmt   = '"+POut.Double(adjustment.AdjAmt)+"', "
				+"PatNum   =  "+POut.Long  (adjustment.PatNum)+", "
				+"AdjType  =  "+POut.Long  (adjustment.AdjType)+", "
				+"ProvNum  =  "+POut.Long  (adjustment.ProvNum)+", "
				+"AdjNote  = '"+POut.String(adjustment.AdjNote)+"', "
				+"ProcDate =  "+POut.Date  (adjustment.ProcDate)+", "
				+"ProcNum  =  "+POut.Long  (adjustment.ProcNum)+", "
				//DateEntry not allowed to change
				+"ClinicNum=  "+POut.Long  (adjustment.ClinicNum)+" "
				+"WHERE AdjNum = "+POut.Long(adjustment.AdjNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Adjustment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Adjustment adjustment,Adjustment oldAdjustment){
			string command="";
			if(adjustment.AdjDate != oldAdjustment.AdjDate) {
				if(command!=""){ command+=",";}
				command+="AdjDate = "+POut.Date(adjustment.AdjDate)+"";
			}
			if(adjustment.AdjAmt != oldAdjustment.AdjAmt) {
				if(command!=""){ command+=",";}
				command+="AdjAmt = '"+POut.Double(adjustment.AdjAmt)+"'";
			}
			if(adjustment.PatNum != oldAdjustment.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(adjustment.PatNum)+"";
			}
			if(adjustment.AdjType != oldAdjustment.AdjType) {
				if(command!=""){ command+=",";}
				command+="AdjType = "+POut.Long(adjustment.AdjType)+"";
			}
			if(adjustment.ProvNum != oldAdjustment.ProvNum) {
				if(command!=""){ command+=",";}
				command+="ProvNum = "+POut.Long(adjustment.ProvNum)+"";
			}
			if(adjustment.AdjNote != oldAdjustment.AdjNote) {
				if(command!=""){ command+=",";}
				command+="AdjNote = '"+POut.String(adjustment.AdjNote)+"'";
			}
			if(adjustment.ProcDate != oldAdjustment.ProcDate) {
				if(command!=""){ command+=",";}
				command+="ProcDate = "+POut.Date(adjustment.ProcDate)+"";
			}
			if(adjustment.ProcNum != oldAdjustment.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(adjustment.ProcNum)+"";
			}
			//DateEntry not allowed to change
			if(adjustment.ClinicNum != oldAdjustment.ClinicNum) {
				if(command!=""){ command+=",";}
				command+="ClinicNum = "+POut.Long(adjustment.ClinicNum)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE adjustment SET "+command
				+" WHERE AdjNum = "+POut.Long(adjustment.AdjNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Adjustment from the database.</summary>
		internal static void Delete(long adjNum){
			string command="DELETE FROM adjustment "
				+"WHERE AdjNum = "+POut.Long(adjNum);
			Db.NonQ(command);
		}

	}
}