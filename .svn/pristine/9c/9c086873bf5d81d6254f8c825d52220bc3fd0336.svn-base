//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class VaccineDefCrud {
		///<summary>Gets one VaccineDef object from the database using the primary key.  Returns null if not found.</summary>
		internal static VaccineDef SelectOne(long vaccineDefNum){
			string command="SELECT * FROM vaccinedef "
				+"WHERE VaccineDefNum = "+POut.Long(vaccineDefNum);
			List<VaccineDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one VaccineDef object from the database using a query.</summary>
		internal static VaccineDef SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<VaccineDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of VaccineDef objects from the database using a query.</summary>
		internal static List<VaccineDef> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<VaccineDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<VaccineDef> TableToList(DataTable table){
			List<VaccineDef> retVal=new List<VaccineDef>();
			VaccineDef vaccineDef;
			for(int i=0;i<table.Rows.Count;i++) {
				vaccineDef=new VaccineDef();
				vaccineDef.VaccineDefNum      = PIn.Long  (table.Rows[i]["VaccineDefNum"].ToString());
				vaccineDef.CVXCode            = PIn.String(table.Rows[i]["CVXCode"].ToString());
				vaccineDef.VaccineName        = PIn.String(table.Rows[i]["VaccineName"].ToString());
				vaccineDef.DrugManufacturerNum= PIn.Long  (table.Rows[i]["DrugManufacturerNum"].ToString());
				retVal.Add(vaccineDef);
			}
			return retVal;
		}

		///<summary>Inserts one VaccineDef into the database.  Returns the new priKey.</summary>
		internal static long Insert(VaccineDef vaccineDef){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				vaccineDef.VaccineDefNum=DbHelper.GetNextOracleKey("vaccinedef","VaccineDefNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(vaccineDef,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							vaccineDef.VaccineDefNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(vaccineDef,false);
			}
		}

		///<summary>Inserts one VaccineDef into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(VaccineDef vaccineDef,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				vaccineDef.VaccineDefNum=ReplicationServers.GetKey("vaccinedef","VaccineDefNum");
			}
			string command="INSERT INTO vaccinedef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="VaccineDefNum,";
			}
			command+="CVXCode,VaccineName,DrugManufacturerNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(vaccineDef.VaccineDefNum)+",";
			}
			command+=
				 "'"+POut.String(vaccineDef.CVXCode)+"',"
				+"'"+POut.String(vaccineDef.VaccineName)+"',"
				+    POut.Long  (vaccineDef.DrugManufacturerNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				vaccineDef.VaccineDefNum=Db.NonQ(command,true);
			}
			return vaccineDef.VaccineDefNum;
		}

		///<summary>Updates one VaccineDef in the database.</summary>
		internal static void Update(VaccineDef vaccineDef){
			string command="UPDATE vaccinedef SET "
				+"CVXCode            = '"+POut.String(vaccineDef.CVXCode)+"', "
				+"VaccineName        = '"+POut.String(vaccineDef.VaccineName)+"', "
				+"DrugManufacturerNum=  "+POut.Long  (vaccineDef.DrugManufacturerNum)+" "
				+"WHERE VaccineDefNum = "+POut.Long(vaccineDef.VaccineDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one VaccineDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(VaccineDef vaccineDef,VaccineDef oldVaccineDef){
			string command="";
			if(vaccineDef.CVXCode != oldVaccineDef.CVXCode) {
				if(command!=""){ command+=",";}
				command+="CVXCode = '"+POut.String(vaccineDef.CVXCode)+"'";
			}
			if(vaccineDef.VaccineName != oldVaccineDef.VaccineName) {
				if(command!=""){ command+=",";}
				command+="VaccineName = '"+POut.String(vaccineDef.VaccineName)+"'";
			}
			if(vaccineDef.DrugManufacturerNum != oldVaccineDef.DrugManufacturerNum) {
				if(command!=""){ command+=",";}
				command+="DrugManufacturerNum = "+POut.Long(vaccineDef.DrugManufacturerNum)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE vaccinedef SET "+command
				+" WHERE VaccineDefNum = "+POut.Long(vaccineDef.VaccineDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one VaccineDef from the database.</summary>
		internal static void Delete(long vaccineDefNum){
			string command="DELETE FROM vaccinedef "
				+"WHERE VaccineDefNum = "+POut.Long(vaccineDefNum);
			Db.NonQ(command);
		}

	}
}