//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class CanadianNetworkCrud {
		///<summary>Gets one CanadianNetwork object from the database using the primary key.  Returns null if not found.</summary>
		internal static CanadianNetwork SelectOne(long canadianNetworkNum){
			string command="SELECT * FROM canadiannetwork "
				+"WHERE CanadianNetworkNum = "+POut.Long(canadianNetworkNum);
			List<CanadianNetwork> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one CanadianNetwork object from the database using a query.</summary>
		internal static CanadianNetwork SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianNetwork> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of CanadianNetwork objects from the database using a query.</summary>
		internal static List<CanadianNetwork> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianNetwork> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<CanadianNetwork> TableToList(DataTable table){
			List<CanadianNetwork> retVal=new List<CanadianNetwork>();
			CanadianNetwork canadianNetwork;
			for(int i=0;i<table.Rows.Count;i++) {
				canadianNetwork=new CanadianNetwork();
				canadianNetwork.CanadianNetworkNum       = PIn.Long  (table.Rows[i]["CanadianNetworkNum"].ToString());
				canadianNetwork.Abbrev                   = PIn.String(table.Rows[i]["Abbrev"].ToString());
				canadianNetwork.Descript                 = PIn.String(table.Rows[i]["Descript"].ToString());
				canadianNetwork.CanadianTransactionPrefix= PIn.String(table.Rows[i]["CanadianTransactionPrefix"].ToString());
				canadianNetwork.CanadianIsRprHandler     = PIn.Bool  (table.Rows[i]["CanadianIsRprHandler"].ToString());
				retVal.Add(canadianNetwork);
			}
			return retVal;
		}

		///<summary>Inserts one CanadianNetwork into the database.  Returns the new priKey.</summary>
		internal static long Insert(CanadianNetwork canadianNetwork){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				canadianNetwork.CanadianNetworkNum=DbHelper.GetNextOracleKey("canadiannetwork","CanadianNetworkNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(canadianNetwork,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							canadianNetwork.CanadianNetworkNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(canadianNetwork,false);
			}
		}

		///<summary>Inserts one CanadianNetwork into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(CanadianNetwork canadianNetwork,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				canadianNetwork.CanadianNetworkNum=ReplicationServers.GetKey("canadiannetwork","CanadianNetworkNum");
			}
			string command="INSERT INTO canadiannetwork (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CanadianNetworkNum,";
			}
			command+="Abbrev,Descript,CanadianTransactionPrefix,CanadianIsRprHandler) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(canadianNetwork.CanadianNetworkNum)+",";
			}
			command+=
				 "'"+POut.String(canadianNetwork.Abbrev)+"',"
				+"'"+POut.String(canadianNetwork.Descript)+"',"
				+"'"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"',"
				+    POut.Bool  (canadianNetwork.CanadianIsRprHandler)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				canadianNetwork.CanadianNetworkNum=Db.NonQ(command,true);
			}
			return canadianNetwork.CanadianNetworkNum;
		}

		///<summary>Updates one CanadianNetwork in the database.</summary>
		internal static void Update(CanadianNetwork canadianNetwork){
			string command="UPDATE canadiannetwork SET "
				+"Abbrev                   = '"+POut.String(canadianNetwork.Abbrev)+"', "
				+"Descript                 = '"+POut.String(canadianNetwork.Descript)+"', "
				+"CanadianTransactionPrefix= '"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"', "
				+"CanadianIsRprHandler     =  "+POut.Bool  (canadianNetwork.CanadianIsRprHandler)+" "
				+"WHERE CanadianNetworkNum = "+POut.Long(canadianNetwork.CanadianNetworkNum);
			Db.NonQ(command);
		}

		///<summary>Updates one CanadianNetwork in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(CanadianNetwork canadianNetwork,CanadianNetwork oldCanadianNetwork){
			string command="";
			if(canadianNetwork.Abbrev != oldCanadianNetwork.Abbrev) {
				if(command!=""){ command+=",";}
				command+="Abbrev = '"+POut.String(canadianNetwork.Abbrev)+"'";
			}
			if(canadianNetwork.Descript != oldCanadianNetwork.Descript) {
				if(command!=""){ command+=",";}
				command+="Descript = '"+POut.String(canadianNetwork.Descript)+"'";
			}
			if(canadianNetwork.CanadianTransactionPrefix != oldCanadianNetwork.CanadianTransactionPrefix) {
				if(command!=""){ command+=",";}
				command+="CanadianTransactionPrefix = '"+POut.String(canadianNetwork.CanadianTransactionPrefix)+"'";
			}
			if(canadianNetwork.CanadianIsRprHandler != oldCanadianNetwork.CanadianIsRprHandler) {
				if(command!=""){ command+=",";}
				command+="CanadianIsRprHandler = "+POut.Bool(canadianNetwork.CanadianIsRprHandler)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE canadiannetwork SET "+command
				+" WHERE CanadianNetworkNum = "+POut.Long(canadianNetwork.CanadianNetworkNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one CanadianNetwork from the database.</summary>
		internal static void Delete(long canadianNetworkNum){
			string command="DELETE FROM canadiannetwork "
				+"WHERE CanadianNetworkNum = "+POut.Long(canadianNetworkNum);
			Db.NonQ(command);
		}

	}
}