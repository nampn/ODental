//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AutoCodeCondCrud {
		///<summary>Gets one AutoCodeCond object from the database using the primary key.  Returns null if not found.</summary>
		internal static AutoCodeCond SelectOne(long autoCodeCondNum){
			string command="SELECT * FROM autocodecond "
				+"WHERE AutoCodeCondNum = "+POut.Long(autoCodeCondNum);
			List<AutoCodeCond> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AutoCodeCond object from the database using a query.</summary>
		internal static AutoCodeCond SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AutoCodeCond> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AutoCodeCond objects from the database using a query.</summary>
		internal static List<AutoCodeCond> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AutoCodeCond> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<AutoCodeCond> TableToList(DataTable table){
			List<AutoCodeCond> retVal=new List<AutoCodeCond>();
			AutoCodeCond autoCodeCond;
			for(int i=0;i<table.Rows.Count;i++) {
				autoCodeCond=new AutoCodeCond();
				autoCodeCond.AutoCodeCondNum= PIn.Long  (table.Rows[i]["AutoCodeCondNum"].ToString());
				autoCodeCond.AutoCodeItemNum= PIn.Long  (table.Rows[i]["AutoCodeItemNum"].ToString());
				autoCodeCond.Cond           = (AutoCondition)PIn.Int(table.Rows[i]["Cond"].ToString());
				retVal.Add(autoCodeCond);
			}
			return retVal;
		}

		///<summary>Inserts one AutoCodeCond into the database.  Returns the new priKey.</summary>
		internal static long Insert(AutoCodeCond autoCodeCond){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				autoCodeCond.AutoCodeCondNum=DbHelper.GetNextOracleKey("autocodecond","AutoCodeCondNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(autoCodeCond,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							autoCodeCond.AutoCodeCondNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(autoCodeCond,false);
			}
		}

		///<summary>Inserts one AutoCodeCond into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(AutoCodeCond autoCodeCond,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				autoCodeCond.AutoCodeCondNum=ReplicationServers.GetKey("autocodecond","AutoCodeCondNum");
			}
			string command="INSERT INTO autocodecond (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AutoCodeCondNum,";
			}
			command+="AutoCodeItemNum,Cond) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(autoCodeCond.AutoCodeCondNum)+",";
			}
			command+=
				     POut.Long  (autoCodeCond.AutoCodeItemNum)+","
				+    POut.Int   ((int)autoCodeCond.Cond)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoCodeCond.AutoCodeCondNum=Db.NonQ(command,true);
			}
			return autoCodeCond.AutoCodeCondNum;
		}

		///<summary>Updates one AutoCodeCond in the database.</summary>
		internal static void Update(AutoCodeCond autoCodeCond){
			string command="UPDATE autocodecond SET "
				+"AutoCodeItemNum=  "+POut.Long  (autoCodeCond.AutoCodeItemNum)+", "
				+"Cond           =  "+POut.Int   ((int)autoCodeCond.Cond)+" "
				+"WHERE AutoCodeCondNum = "+POut.Long(autoCodeCond.AutoCodeCondNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AutoCodeCond in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(AutoCodeCond autoCodeCond,AutoCodeCond oldAutoCodeCond){
			string command="";
			if(autoCodeCond.AutoCodeItemNum != oldAutoCodeCond.AutoCodeItemNum) {
				if(command!=""){ command+=",";}
				command+="AutoCodeItemNum = "+POut.Long(autoCodeCond.AutoCodeItemNum)+"";
			}
			if(autoCodeCond.Cond != oldAutoCodeCond.Cond) {
				if(command!=""){ command+=",";}
				command+="Cond = "+POut.Int   ((int)autoCodeCond.Cond)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE autocodecond SET "+command
				+" WHERE AutoCodeCondNum = "+POut.Long(autoCodeCond.AutoCodeCondNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AutoCodeCond from the database.</summary>
		internal static void Delete(long autoCodeCondNum){
			string command="DELETE FROM autocodecond "
				+"WHERE AutoCodeCondNum = "+POut.Long(autoCodeCondNum);
			Db.NonQ(command);
		}

	}
}