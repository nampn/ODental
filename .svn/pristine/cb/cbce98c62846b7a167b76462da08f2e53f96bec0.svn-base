//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class SheetFieldCrud {
		///<summary>Gets one SheetField object from the database using the primary key.  Returns null if not found.</summary>
		internal static SheetField SelectOne(long sheetFieldNum){
			string command="SELECT * FROM sheetfield "
				+"WHERE SheetFieldNum = "+POut.Long(sheetFieldNum);
			List<SheetField> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SheetField object from the database using a query.</summary>
		internal static SheetField SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SheetField> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SheetField objects from the database using a query.</summary>
		internal static List<SheetField> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SheetField> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<SheetField> TableToList(DataTable table){
			List<SheetField> retVal=new List<SheetField>();
			SheetField sheetField;
			for(int i=0;i<table.Rows.Count;i++) {
				sheetField=new SheetField();
				sheetField.SheetFieldNum   = PIn.Long  (table.Rows[i]["SheetFieldNum"].ToString());
				sheetField.SheetNum        = PIn.Long  (table.Rows[i]["SheetNum"].ToString());
				sheetField.FieldType       = (SheetFieldType)PIn.Int(table.Rows[i]["FieldType"].ToString());
				sheetField.FieldName       = PIn.String(table.Rows[i]["FieldName"].ToString());
				sheetField.FieldValue      = PIn.String(table.Rows[i]["FieldValue"].ToString());
				sheetField.FontSize        = PIn.Float (table.Rows[i]["FontSize"].ToString());
				sheetField.FontName        = PIn.String(table.Rows[i]["FontName"].ToString());
				sheetField.FontIsBold      = PIn.Bool  (table.Rows[i]["FontIsBold"].ToString());
				sheetField.XPos            = PIn.Int   (table.Rows[i]["XPos"].ToString());
				sheetField.YPos            = PIn.Int   (table.Rows[i]["YPos"].ToString());
				sheetField.Width           = PIn.Int   (table.Rows[i]["Width"].ToString());
				sheetField.Height          = PIn.Int   (table.Rows[i]["Height"].ToString());
				sheetField.GrowthBehavior  = (GrowthBehaviorEnum)PIn.Int(table.Rows[i]["GrowthBehavior"].ToString());
				sheetField.RadioButtonValue= PIn.String(table.Rows[i]["RadioButtonValue"].ToString());
				sheetField.RadioButtonGroup= PIn.String(table.Rows[i]["RadioButtonGroup"].ToString());
				sheetField.IsRequired      = PIn.Bool  (table.Rows[i]["IsRequired"].ToString());
				sheetField.TabOrder        = PIn.Int   (table.Rows[i]["TabOrder"].ToString());
				retVal.Add(sheetField);
			}
			return retVal;
		}

		///<summary>Inserts one SheetField into the database.  Returns the new priKey.</summary>
		internal static long Insert(SheetField sheetField){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				sheetField.SheetFieldNum=DbHelper.GetNextOracleKey("sheetfield","SheetFieldNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(sheetField,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							sheetField.SheetFieldNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(sheetField,false);
			}
		}

		///<summary>Inserts one SheetField into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(SheetField sheetField,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				sheetField.SheetFieldNum=ReplicationServers.GetKey("sheetfield","SheetFieldNum");
			}
			string command="INSERT INTO sheetfield (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SheetFieldNum,";
			}
			command+="SheetNum,FieldType,FieldName,FieldValue,FontSize,FontName,FontIsBold,XPos,YPos,Width,Height,GrowthBehavior,RadioButtonValue,RadioButtonGroup,IsRequired,TabOrder) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(sheetField.SheetFieldNum)+",";
			}
			command+=
				     POut.Long  (sheetField.SheetNum)+","
				+    POut.Int   ((int)sheetField.FieldType)+","
				+"'"+POut.String(sheetField.FieldName)+"',"
				+DbHelper.ParamChar+"paramFieldValue,"
				+    POut.Float (sheetField.FontSize)+","
				+"'"+POut.String(sheetField.FontName)+"',"
				+    POut.Bool  (sheetField.FontIsBold)+","
				+    POut.Int   (sheetField.XPos)+","
				+    POut.Int   (sheetField.YPos)+","
				+    POut.Int   (sheetField.Width)+","
				+    POut.Int   (sheetField.Height)+","
				+    POut.Int   ((int)sheetField.GrowthBehavior)+","
				+"'"+POut.String(sheetField.RadioButtonValue)+"',"
				+"'"+POut.String(sheetField.RadioButtonGroup)+"',"
				+    POut.Bool  (sheetField.IsRequired)+","
				+    POut.Int   (sheetField.TabOrder)+")";
			if(sheetField.FieldValue==null) {
				sheetField.FieldValue="";
			}
			OdSqlParameter paramFieldValue=new OdSqlParameter("paramFieldValue",OdDbType.Text,sheetField.FieldValue);
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramFieldValue);
			}
			else {
				sheetField.SheetFieldNum=Db.NonQ(command,true,paramFieldValue);
			}
			return sheetField.SheetFieldNum;
		}

		///<summary>Updates one SheetField in the database.</summary>
		internal static void Update(SheetField sheetField){
			string command="UPDATE sheetfield SET "
				+"SheetNum        =  "+POut.Long  (sheetField.SheetNum)+", "
				+"FieldType       =  "+POut.Int   ((int)sheetField.FieldType)+", "
				+"FieldName       = '"+POut.String(sheetField.FieldName)+"', "
				+"FieldValue      =  "+DbHelper.ParamChar+"paramFieldValue, "
				+"FontSize        =  "+POut.Float (sheetField.FontSize)+", "
				+"FontName        = '"+POut.String(sheetField.FontName)+"', "
				+"FontIsBold      =  "+POut.Bool  (sheetField.FontIsBold)+", "
				+"XPos            =  "+POut.Int   (sheetField.XPos)+", "
				+"YPos            =  "+POut.Int   (sheetField.YPos)+", "
				+"Width           =  "+POut.Int   (sheetField.Width)+", "
				+"Height          =  "+POut.Int   (sheetField.Height)+", "
				+"GrowthBehavior  =  "+POut.Int   ((int)sheetField.GrowthBehavior)+", "
				+"RadioButtonValue= '"+POut.String(sheetField.RadioButtonValue)+"', "
				+"RadioButtonGroup= '"+POut.String(sheetField.RadioButtonGroup)+"', "
				+"IsRequired      =  "+POut.Bool  (sheetField.IsRequired)+", "
				+"TabOrder        =  "+POut.Int   (sheetField.TabOrder)+" "
				+"WHERE SheetFieldNum = "+POut.Long(sheetField.SheetFieldNum);
			if(sheetField.FieldValue==null) {
				sheetField.FieldValue="";
			}
			OdSqlParameter paramFieldValue=new OdSqlParameter("paramFieldValue",OdDbType.Text,sheetField.FieldValue);
			Db.NonQ(command,paramFieldValue);
		}

		///<summary>Updates one SheetField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(SheetField sheetField,SheetField oldSheetField){
			string command="";
			if(sheetField.SheetNum != oldSheetField.SheetNum) {
				if(command!=""){ command+=",";}
				command+="SheetNum = "+POut.Long(sheetField.SheetNum)+"";
			}
			if(sheetField.FieldType != oldSheetField.FieldType) {
				if(command!=""){ command+=",";}
				command+="FieldType = "+POut.Int   ((int)sheetField.FieldType)+"";
			}
			if(sheetField.FieldName != oldSheetField.FieldName) {
				if(command!=""){ command+=",";}
				command+="FieldName = '"+POut.String(sheetField.FieldName)+"'";
			}
			if(sheetField.FieldValue != oldSheetField.FieldValue) {
				if(command!=""){ command+=",";}
				command+="FieldValue = "+DbHelper.ParamChar+"paramFieldValue";
			}
			if(sheetField.FontSize != oldSheetField.FontSize) {
				if(command!=""){ command+=",";}
				command+="FontSize = "+POut.Float(sheetField.FontSize)+"";
			}
			if(sheetField.FontName != oldSheetField.FontName) {
				if(command!=""){ command+=",";}
				command+="FontName = '"+POut.String(sheetField.FontName)+"'";
			}
			if(sheetField.FontIsBold != oldSheetField.FontIsBold) {
				if(command!=""){ command+=",";}
				command+="FontIsBold = "+POut.Bool(sheetField.FontIsBold)+"";
			}
			if(sheetField.XPos != oldSheetField.XPos) {
				if(command!=""){ command+=",";}
				command+="XPos = "+POut.Int(sheetField.XPos)+"";
			}
			if(sheetField.YPos != oldSheetField.YPos) {
				if(command!=""){ command+=",";}
				command+="YPos = "+POut.Int(sheetField.YPos)+"";
			}
			if(sheetField.Width != oldSheetField.Width) {
				if(command!=""){ command+=",";}
				command+="Width = "+POut.Int(sheetField.Width)+"";
			}
			if(sheetField.Height != oldSheetField.Height) {
				if(command!=""){ command+=",";}
				command+="Height = "+POut.Int(sheetField.Height)+"";
			}
			if(sheetField.GrowthBehavior != oldSheetField.GrowthBehavior) {
				if(command!=""){ command+=",";}
				command+="GrowthBehavior = "+POut.Int   ((int)sheetField.GrowthBehavior)+"";
			}
			if(sheetField.RadioButtonValue != oldSheetField.RadioButtonValue) {
				if(command!=""){ command+=",";}
				command+="RadioButtonValue = '"+POut.String(sheetField.RadioButtonValue)+"'";
			}
			if(sheetField.RadioButtonGroup != oldSheetField.RadioButtonGroup) {
				if(command!=""){ command+=",";}
				command+="RadioButtonGroup = '"+POut.String(sheetField.RadioButtonGroup)+"'";
			}
			if(sheetField.IsRequired != oldSheetField.IsRequired) {
				if(command!=""){ command+=",";}
				command+="IsRequired = "+POut.Bool(sheetField.IsRequired)+"";
			}
			if(sheetField.TabOrder != oldSheetField.TabOrder) {
				if(command!=""){ command+=",";}
				command+="TabOrder = "+POut.Int(sheetField.TabOrder)+"";
			}
			if(command==""){
				return;
			}
			if(sheetField.FieldValue==null) {
				sheetField.FieldValue="";
			}
			OdSqlParameter paramFieldValue=new OdSqlParameter("paramFieldValue",OdDbType.Text,sheetField.FieldValue);
			command="UPDATE sheetfield SET "+command
				+" WHERE SheetFieldNum = "+POut.Long(sheetField.SheetFieldNum);
			Db.NonQ(command,paramFieldValue);
		}

		///<summary>Deletes one SheetField from the database.</summary>
		internal static void Delete(long sheetFieldNum){
			string command="DELETE FROM sheetfield "
				+"WHERE SheetFieldNum = "+POut.Long(sheetFieldNum);
			Db.NonQ(command);
		}

	}
}