//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class EmployerCrud {
		///<summary>Gets one Employer object from the database using the primary key.  Returns null if not found.</summary>
		internal static Employer SelectOne(long employerNum){
			string command="SELECT * FROM employer "
				+"WHERE EmployerNum = "+POut.Long(employerNum);
			List<Employer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Employer object from the database using a query.</summary>
		internal static Employer SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Employer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Employer objects from the database using a query.</summary>
		internal static List<Employer> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Employer> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Employer> TableToList(DataTable table){
			List<Employer> retVal=new List<Employer>();
			Employer employer;
			for(int i=0;i<table.Rows.Count;i++) {
				employer=new Employer();
				employer.EmployerNum= PIn.Long  (table.Rows[i]["EmployerNum"].ToString());
				employer.EmpName    = PIn.String(table.Rows[i]["EmpName"].ToString());
				employer.Address    = PIn.String(table.Rows[i]["Address"].ToString());
				employer.Address2   = PIn.String(table.Rows[i]["Address2"].ToString());
				employer.City       = PIn.String(table.Rows[i]["City"].ToString());
				employer.State      = PIn.String(table.Rows[i]["State"].ToString());
				employer.Zip        = PIn.String(table.Rows[i]["Zip"].ToString());
				employer.Phone      = PIn.String(table.Rows[i]["Phone"].ToString());
				retVal.Add(employer);
			}
			return retVal;
		}

		///<summary>Inserts one Employer into the database.  Returns the new priKey.</summary>
		internal static long Insert(Employer employer){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				employer.EmployerNum=DbHelper.GetNextOracleKey("employer","EmployerNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(employer,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							employer.EmployerNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(employer,false);
			}
		}

		///<summary>Inserts one Employer into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Employer employer,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				employer.EmployerNum=ReplicationServers.GetKey("employer","EmployerNum");
			}
			string command="INSERT INTO employer (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmployerNum,";
			}
			command+="EmpName,Address,Address2,City,State,Zip,Phone) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(employer.EmployerNum)+",";
			}
			command+=
				 "'"+POut.String(employer.EmpName)+"',"
				+"'"+POut.String(employer.Address)+"',"
				+"'"+POut.String(employer.Address2)+"',"
				+"'"+POut.String(employer.City)+"',"
				+"'"+POut.String(employer.State)+"',"
				+"'"+POut.String(employer.Zip)+"',"
				+"'"+POut.String(employer.Phone)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				employer.EmployerNum=Db.NonQ(command,true);
			}
			return employer.EmployerNum;
		}

		///<summary>Updates one Employer in the database.</summary>
		internal static void Update(Employer employer){
			string command="UPDATE employer SET "
				+"EmpName    = '"+POut.String(employer.EmpName)+"', "
				+"Address    = '"+POut.String(employer.Address)+"', "
				+"Address2   = '"+POut.String(employer.Address2)+"', "
				+"City       = '"+POut.String(employer.City)+"', "
				+"State      = '"+POut.String(employer.State)+"', "
				+"Zip        = '"+POut.String(employer.Zip)+"', "
				+"Phone      = '"+POut.String(employer.Phone)+"' "
				+"WHERE EmployerNum = "+POut.Long(employer.EmployerNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Employer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Employer employer,Employer oldEmployer){
			string command="";
			if(employer.EmpName != oldEmployer.EmpName) {
				if(command!=""){ command+=",";}
				command+="EmpName = '"+POut.String(employer.EmpName)+"'";
			}
			if(employer.Address != oldEmployer.Address) {
				if(command!=""){ command+=",";}
				command+="Address = '"+POut.String(employer.Address)+"'";
			}
			if(employer.Address2 != oldEmployer.Address2) {
				if(command!=""){ command+=",";}
				command+="Address2 = '"+POut.String(employer.Address2)+"'";
			}
			if(employer.City != oldEmployer.City) {
				if(command!=""){ command+=",";}
				command+="City = '"+POut.String(employer.City)+"'";
			}
			if(employer.State != oldEmployer.State) {
				if(command!=""){ command+=",";}
				command+="State = '"+POut.String(employer.State)+"'";
			}
			if(employer.Zip != oldEmployer.Zip) {
				if(command!=""){ command+=",";}
				command+="Zip = '"+POut.String(employer.Zip)+"'";
			}
			if(employer.Phone != oldEmployer.Phone) {
				if(command!=""){ command+=",";}
				command+="Phone = '"+POut.String(employer.Phone)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE employer SET "+command
				+" WHERE EmployerNum = "+POut.Long(employer.EmployerNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Employer from the database.</summary>
		internal static void Delete(long employerNum){
			string command="DELETE FROM employer "
				+"WHERE EmployerNum = "+POut.Long(employerNum);
			Db.NonQ(command);
		}

	}
}