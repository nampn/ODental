//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ClearinghouseCrud {
		///<summary>Gets one Clearinghouse object from the database using the primary key.  Returns null if not found.</summary>
		internal static Clearinghouse SelectOne(long clearinghouseNum){
			string command="SELECT * FROM clearinghouse "
				+"WHERE ClearinghouseNum = "+POut.Long(clearinghouseNum);
			List<Clearinghouse> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Clearinghouse object from the database using a query.</summary>
		internal static Clearinghouse SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Clearinghouse> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Clearinghouse objects from the database using a query.</summary>
		internal static List<Clearinghouse> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Clearinghouse> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Clearinghouse> TableToList(DataTable table){
			List<Clearinghouse> retVal=new List<Clearinghouse>();
			Clearinghouse clearinghouse;
			for(int i=0;i<table.Rows.Count;i++) {
				clearinghouse=new Clearinghouse();
				clearinghouse.ClearinghouseNum= PIn.Long  (table.Rows[i]["ClearinghouseNum"].ToString());
				clearinghouse.Description     = PIn.String(table.Rows[i]["Description"].ToString());
				clearinghouse.ExportPath      = PIn.String(table.Rows[i]["ExportPath"].ToString());
				clearinghouse.Payors          = PIn.String(table.Rows[i]["Payors"].ToString());
				clearinghouse.Eformat         = (ElectronicClaimFormat)PIn.Int(table.Rows[i]["Eformat"].ToString());
				clearinghouse.ISA05           = PIn.String(table.Rows[i]["ISA05"].ToString());
				clearinghouse.SenderTIN       = PIn.String(table.Rows[i]["SenderTIN"].ToString());
				clearinghouse.ISA07           = PIn.String(table.Rows[i]["ISA07"].ToString());
				clearinghouse.ISA08           = PIn.String(table.Rows[i]["ISA08"].ToString());
				clearinghouse.ISA15           = PIn.String(table.Rows[i]["ISA15"].ToString());
				clearinghouse.Password        = PIn.String(table.Rows[i]["Password"].ToString());
				clearinghouse.ResponsePath    = PIn.String(table.Rows[i]["ResponsePath"].ToString());
				clearinghouse.CommBridge      = (EclaimsCommBridge)PIn.Int(table.Rows[i]["CommBridge"].ToString());
				clearinghouse.ClientProgram   = PIn.String(table.Rows[i]["ClientProgram"].ToString());
				clearinghouse.LastBatchNumber = PIn.Int   (table.Rows[i]["LastBatchNumber"].ToString());
				clearinghouse.ModemPort       = PIn.Byte  (table.Rows[i]["ModemPort"].ToString());
				clearinghouse.LoginID         = PIn.String(table.Rows[i]["LoginID"].ToString());
				clearinghouse.SenderName      = PIn.String(table.Rows[i]["SenderName"].ToString());
				clearinghouse.SenderTelephone = PIn.String(table.Rows[i]["SenderTelephone"].ToString());
				clearinghouse.GS03            = PIn.String(table.Rows[i]["GS03"].ToString());
				clearinghouse.ISA02           = PIn.String(table.Rows[i]["ISA02"].ToString());
				clearinghouse.ISA04           = PIn.String(table.Rows[i]["ISA04"].ToString());
				clearinghouse.ISA16           = PIn.String(table.Rows[i]["ISA16"].ToString());
				clearinghouse.SeparatorData   = PIn.String(table.Rows[i]["SeparatorData"].ToString());
				clearinghouse.SeparatorSegment= PIn.String(table.Rows[i]["SeparatorSegment"].ToString());
				retVal.Add(clearinghouse);
			}
			return retVal;
		}

		///<summary>Inserts one Clearinghouse into the database.  Returns the new priKey.</summary>
		internal static long Insert(Clearinghouse clearinghouse){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				clearinghouse.ClearinghouseNum=DbHelper.GetNextOracleKey("clearinghouse","ClearinghouseNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(clearinghouse,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							clearinghouse.ClearinghouseNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(clearinghouse,false);
			}
		}

		///<summary>Inserts one Clearinghouse into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Clearinghouse clearinghouse,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				clearinghouse.ClearinghouseNum=ReplicationServers.GetKey("clearinghouse","ClearinghouseNum");
			}
			string command="INSERT INTO clearinghouse (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ClearinghouseNum,";
			}
			command+="Description,ExportPath,Payors,Eformat,ISA05,SenderTIN,ISA07,ISA08,ISA15,Password,ResponsePath,CommBridge,ClientProgram,LastBatchNumber,ModemPort,LoginID,SenderName,SenderTelephone,GS03,ISA02,ISA04,ISA16,SeparatorData,SeparatorSegment) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(clearinghouse.ClearinghouseNum)+",";
			}
			command+=
				 "'"+POut.String(clearinghouse.Description)+"',"
				+"'"+POut.String(clearinghouse.ExportPath)+"',"
				+"'"+POut.String(clearinghouse.Payors)+"',"
				+    POut.Int   ((int)clearinghouse.Eformat)+","
				+"'"+POut.String(clearinghouse.ISA05)+"',"
				+"'"+POut.String(clearinghouse.SenderTIN)+"',"
				+"'"+POut.String(clearinghouse.ISA07)+"',"
				+"'"+POut.String(clearinghouse.ISA08)+"',"
				+"'"+POut.String(clearinghouse.ISA15)+"',"
				+"'"+POut.String(clearinghouse.Password)+"',"
				+"'"+POut.String(clearinghouse.ResponsePath)+"',"
				+    POut.Int   ((int)clearinghouse.CommBridge)+","
				+"'"+POut.String(clearinghouse.ClientProgram)+"',"
				+    POut.Int   (clearinghouse.LastBatchNumber)+","
				+    POut.Byte  (clearinghouse.ModemPort)+","
				+"'"+POut.String(clearinghouse.LoginID)+"',"
				+"'"+POut.String(clearinghouse.SenderName)+"',"
				+"'"+POut.String(clearinghouse.SenderTelephone)+"',"
				+"'"+POut.String(clearinghouse.GS03)+"',"
				+"'"+POut.String(clearinghouse.ISA02)+"',"
				+"'"+POut.String(clearinghouse.ISA04)+"',"
				+"'"+POut.String(clearinghouse.ISA16)+"',"
				+"'"+POut.String(clearinghouse.SeparatorData)+"',"
				+"'"+POut.String(clearinghouse.SeparatorSegment)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				clearinghouse.ClearinghouseNum=Db.NonQ(command,true);
			}
			return clearinghouse.ClearinghouseNum;
		}

		///<summary>Updates one Clearinghouse in the database.</summary>
		internal static void Update(Clearinghouse clearinghouse){
			string command="UPDATE clearinghouse SET "
				+"Description     = '"+POut.String(clearinghouse.Description)+"', "
				+"ExportPath      = '"+POut.String(clearinghouse.ExportPath)+"', "
				+"Payors          = '"+POut.String(clearinghouse.Payors)+"', "
				+"Eformat         =  "+POut.Int   ((int)clearinghouse.Eformat)+", "
				+"ISA05           = '"+POut.String(clearinghouse.ISA05)+"', "
				+"SenderTIN       = '"+POut.String(clearinghouse.SenderTIN)+"', "
				+"ISA07           = '"+POut.String(clearinghouse.ISA07)+"', "
				+"ISA08           = '"+POut.String(clearinghouse.ISA08)+"', "
				+"ISA15           = '"+POut.String(clearinghouse.ISA15)+"', "
				+"Password        = '"+POut.String(clearinghouse.Password)+"', "
				+"ResponsePath    = '"+POut.String(clearinghouse.ResponsePath)+"', "
				+"CommBridge      =  "+POut.Int   ((int)clearinghouse.CommBridge)+", "
				+"ClientProgram   = '"+POut.String(clearinghouse.ClientProgram)+"', "
				//LastBatchNumber excluded from update
				+"ModemPort       =  "+POut.Byte  (clearinghouse.ModemPort)+", "
				+"LoginID         = '"+POut.String(clearinghouse.LoginID)+"', "
				+"SenderName      = '"+POut.String(clearinghouse.SenderName)+"', "
				+"SenderTelephone = '"+POut.String(clearinghouse.SenderTelephone)+"', "
				+"GS03            = '"+POut.String(clearinghouse.GS03)+"', "
				+"ISA02           = '"+POut.String(clearinghouse.ISA02)+"', "
				+"ISA04           = '"+POut.String(clearinghouse.ISA04)+"', "
				+"ISA16           = '"+POut.String(clearinghouse.ISA16)+"', "
				+"SeparatorData   = '"+POut.String(clearinghouse.SeparatorData)+"', "
				+"SeparatorSegment= '"+POut.String(clearinghouse.SeparatorSegment)+"' "
				+"WHERE ClearinghouseNum = "+POut.Long(clearinghouse.ClearinghouseNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Clearinghouse in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Clearinghouse clearinghouse,Clearinghouse oldClearinghouse){
			string command="";
			if(clearinghouse.Description != oldClearinghouse.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(clearinghouse.Description)+"'";
			}
			if(clearinghouse.ExportPath != oldClearinghouse.ExportPath) {
				if(command!=""){ command+=",";}
				command+="ExportPath = '"+POut.String(clearinghouse.ExportPath)+"'";
			}
			if(clearinghouse.Payors != oldClearinghouse.Payors) {
				if(command!=""){ command+=",";}
				command+="Payors = '"+POut.String(clearinghouse.Payors)+"'";
			}
			if(clearinghouse.Eformat != oldClearinghouse.Eformat) {
				if(command!=""){ command+=",";}
				command+="Eformat = "+POut.Int   ((int)clearinghouse.Eformat)+"";
			}
			if(clearinghouse.ISA05 != oldClearinghouse.ISA05) {
				if(command!=""){ command+=",";}
				command+="ISA05 = '"+POut.String(clearinghouse.ISA05)+"'";
			}
			if(clearinghouse.SenderTIN != oldClearinghouse.SenderTIN) {
				if(command!=""){ command+=",";}
				command+="SenderTIN = '"+POut.String(clearinghouse.SenderTIN)+"'";
			}
			if(clearinghouse.ISA07 != oldClearinghouse.ISA07) {
				if(command!=""){ command+=",";}
				command+="ISA07 = '"+POut.String(clearinghouse.ISA07)+"'";
			}
			if(clearinghouse.ISA08 != oldClearinghouse.ISA08) {
				if(command!=""){ command+=",";}
				command+="ISA08 = '"+POut.String(clearinghouse.ISA08)+"'";
			}
			if(clearinghouse.ISA15 != oldClearinghouse.ISA15) {
				if(command!=""){ command+=",";}
				command+="ISA15 = '"+POut.String(clearinghouse.ISA15)+"'";
			}
			if(clearinghouse.Password != oldClearinghouse.Password) {
				if(command!=""){ command+=",";}
				command+="Password = '"+POut.String(clearinghouse.Password)+"'";
			}
			if(clearinghouse.ResponsePath != oldClearinghouse.ResponsePath) {
				if(command!=""){ command+=",";}
				command+="ResponsePath = '"+POut.String(clearinghouse.ResponsePath)+"'";
			}
			if(clearinghouse.CommBridge != oldClearinghouse.CommBridge) {
				if(command!=""){ command+=",";}
				command+="CommBridge = "+POut.Int   ((int)clearinghouse.CommBridge)+"";
			}
			if(clearinghouse.ClientProgram != oldClearinghouse.ClientProgram) {
				if(command!=""){ command+=",";}
				command+="ClientProgram = '"+POut.String(clearinghouse.ClientProgram)+"'";
			}
			//LastBatchNumber excluded from update
			if(clearinghouse.ModemPort != oldClearinghouse.ModemPort) {
				if(command!=""){ command+=",";}
				command+="ModemPort = "+POut.Byte(clearinghouse.ModemPort)+"";
			}
			if(clearinghouse.LoginID != oldClearinghouse.LoginID) {
				if(command!=""){ command+=",";}
				command+="LoginID = '"+POut.String(clearinghouse.LoginID)+"'";
			}
			if(clearinghouse.SenderName != oldClearinghouse.SenderName) {
				if(command!=""){ command+=",";}
				command+="SenderName = '"+POut.String(clearinghouse.SenderName)+"'";
			}
			if(clearinghouse.SenderTelephone != oldClearinghouse.SenderTelephone) {
				if(command!=""){ command+=",";}
				command+="SenderTelephone = '"+POut.String(clearinghouse.SenderTelephone)+"'";
			}
			if(clearinghouse.GS03 != oldClearinghouse.GS03) {
				if(command!=""){ command+=",";}
				command+="GS03 = '"+POut.String(clearinghouse.GS03)+"'";
			}
			if(clearinghouse.ISA02 != oldClearinghouse.ISA02) {
				if(command!=""){ command+=",";}
				command+="ISA02 = '"+POut.String(clearinghouse.ISA02)+"'";
			}
			if(clearinghouse.ISA04 != oldClearinghouse.ISA04) {
				if(command!=""){ command+=",";}
				command+="ISA04 = '"+POut.String(clearinghouse.ISA04)+"'";
			}
			if(clearinghouse.ISA16 != oldClearinghouse.ISA16) {
				if(command!=""){ command+=",";}
				command+="ISA16 = '"+POut.String(clearinghouse.ISA16)+"'";
			}
			if(clearinghouse.SeparatorData != oldClearinghouse.SeparatorData) {
				if(command!=""){ command+=",";}
				command+="SeparatorData = '"+POut.String(clearinghouse.SeparatorData)+"'";
			}
			if(clearinghouse.SeparatorSegment != oldClearinghouse.SeparatorSegment) {
				if(command!=""){ command+=",";}
				command+="SeparatorSegment = '"+POut.String(clearinghouse.SeparatorSegment)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE clearinghouse SET "+command
				+" WHERE ClearinghouseNum = "+POut.Long(clearinghouse.ClearinghouseNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Clearinghouse from the database.</summary>
		internal static void Delete(long clearinghouseNum){
			string command="DELETE FROM clearinghouse "
				+"WHERE ClearinghouseNum = "+POut.Long(clearinghouseNum);
			Db.NonQ(command);
		}

	}
}