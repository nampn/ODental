//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ClaimCondCodeLogCrud {
		///<summary>Gets one ClaimCondCodeLog object from the database using the primary key.  Returns null if not found.</summary>
		internal static ClaimCondCodeLog SelectOne(long claimCondCodeLogNum){
			string command="SELECT * FROM claimcondcodelog "
				+"WHERE ClaimCondCodeLogNum = "+POut.Long(claimCondCodeLogNum);
			List<ClaimCondCodeLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ClaimCondCodeLog object from the database using a query.</summary>
		internal static ClaimCondCodeLog SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ClaimCondCodeLog> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ClaimCondCodeLog objects from the database using a query.</summary>
		internal static List<ClaimCondCodeLog> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ClaimCondCodeLog> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<ClaimCondCodeLog> TableToList(DataTable table){
			List<ClaimCondCodeLog> retVal=new List<ClaimCondCodeLog>();
			ClaimCondCodeLog claimCondCodeLog;
			for(int i=0;i<table.Rows.Count;i++) {
				claimCondCodeLog=new ClaimCondCodeLog();
				claimCondCodeLog.ClaimCondCodeLogNum= PIn.Long  (table.Rows[i]["ClaimCondCodeLogNum"].ToString());
				claimCondCodeLog.ClaimNum           = PIn.Long  (table.Rows[i]["ClaimNum"].ToString());
				claimCondCodeLog.Code0              = PIn.String(table.Rows[i]["Code0"].ToString());
				claimCondCodeLog.Code1              = PIn.String(table.Rows[i]["Code1"].ToString());
				claimCondCodeLog.Code2              = PIn.String(table.Rows[i]["Code2"].ToString());
				claimCondCodeLog.Code3              = PIn.String(table.Rows[i]["Code3"].ToString());
				claimCondCodeLog.Code4              = PIn.String(table.Rows[i]["Code4"].ToString());
				claimCondCodeLog.Code5              = PIn.String(table.Rows[i]["Code5"].ToString());
				claimCondCodeLog.Code6              = PIn.String(table.Rows[i]["Code6"].ToString());
				claimCondCodeLog.Code7              = PIn.String(table.Rows[i]["Code7"].ToString());
				claimCondCodeLog.Code8              = PIn.String(table.Rows[i]["Code8"].ToString());
				claimCondCodeLog.Code9              = PIn.String(table.Rows[i]["Code9"].ToString());
				claimCondCodeLog.Code10             = PIn.String(table.Rows[i]["Code10"].ToString());
				retVal.Add(claimCondCodeLog);
			}
			return retVal;
		}

		///<summary>Inserts one ClaimCondCodeLog into the database.  Returns the new priKey.</summary>
		internal static long Insert(ClaimCondCodeLog claimCondCodeLog){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				claimCondCodeLog.ClaimCondCodeLogNum=DbHelper.GetNextOracleKey("claimcondcodelog","ClaimCondCodeLogNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(claimCondCodeLog,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							claimCondCodeLog.ClaimCondCodeLogNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(claimCondCodeLog,false);
			}
		}

		///<summary>Inserts one ClaimCondCodeLog into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(ClaimCondCodeLog claimCondCodeLog,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				claimCondCodeLog.ClaimCondCodeLogNum=ReplicationServers.GetKey("claimcondcodelog","ClaimCondCodeLogNum");
			}
			string command="INSERT INTO claimcondcodelog (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ClaimCondCodeLogNum,";
			}
			command+="ClaimNum,Code0,Code1,Code2,Code3,Code4,Code5,Code6,Code7,Code8,Code9,Code10) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(claimCondCodeLog.ClaimCondCodeLogNum)+",";
			}
			command+=
				     POut.Long  (claimCondCodeLog.ClaimNum)+","
				+"'"+POut.String(claimCondCodeLog.Code0)+"',"
				+"'"+POut.String(claimCondCodeLog.Code1)+"',"
				+"'"+POut.String(claimCondCodeLog.Code2)+"',"
				+"'"+POut.String(claimCondCodeLog.Code3)+"',"
				+"'"+POut.String(claimCondCodeLog.Code4)+"',"
				+"'"+POut.String(claimCondCodeLog.Code5)+"',"
				+"'"+POut.String(claimCondCodeLog.Code6)+"',"
				+"'"+POut.String(claimCondCodeLog.Code7)+"',"
				+"'"+POut.String(claimCondCodeLog.Code8)+"',"
				+"'"+POut.String(claimCondCodeLog.Code9)+"',"
				+"'"+POut.String(claimCondCodeLog.Code10)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				claimCondCodeLog.ClaimCondCodeLogNum=Db.NonQ(command,true);
			}
			return claimCondCodeLog.ClaimCondCodeLogNum;
		}

		///<summary>Updates one ClaimCondCodeLog in the database.</summary>
		internal static void Update(ClaimCondCodeLog claimCondCodeLog){
			string command="UPDATE claimcondcodelog SET "
				+"ClaimNum           =  "+POut.Long  (claimCondCodeLog.ClaimNum)+", "
				+"Code0              = '"+POut.String(claimCondCodeLog.Code0)+"', "
				+"Code1              = '"+POut.String(claimCondCodeLog.Code1)+"', "
				+"Code2              = '"+POut.String(claimCondCodeLog.Code2)+"', "
				+"Code3              = '"+POut.String(claimCondCodeLog.Code3)+"', "
				+"Code4              = '"+POut.String(claimCondCodeLog.Code4)+"', "
				+"Code5              = '"+POut.String(claimCondCodeLog.Code5)+"', "
				+"Code6              = '"+POut.String(claimCondCodeLog.Code6)+"', "
				+"Code7              = '"+POut.String(claimCondCodeLog.Code7)+"', "
				+"Code8              = '"+POut.String(claimCondCodeLog.Code8)+"', "
				+"Code9              = '"+POut.String(claimCondCodeLog.Code9)+"', "
				+"Code10             = '"+POut.String(claimCondCodeLog.Code10)+"' "
				+"WHERE ClaimCondCodeLogNum = "+POut.Long(claimCondCodeLog.ClaimCondCodeLogNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ClaimCondCodeLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(ClaimCondCodeLog claimCondCodeLog,ClaimCondCodeLog oldClaimCondCodeLog){
			string command="";
			if(claimCondCodeLog.ClaimNum != oldClaimCondCodeLog.ClaimNum) {
				if(command!=""){ command+=",";}
				command+="ClaimNum = "+POut.Long(claimCondCodeLog.ClaimNum)+"";
			}
			if(claimCondCodeLog.Code0 != oldClaimCondCodeLog.Code0) {
				if(command!=""){ command+=",";}
				command+="Code0 = '"+POut.String(claimCondCodeLog.Code0)+"'";
			}
			if(claimCondCodeLog.Code1 != oldClaimCondCodeLog.Code1) {
				if(command!=""){ command+=",";}
				command+="Code1 = '"+POut.String(claimCondCodeLog.Code1)+"'";
			}
			if(claimCondCodeLog.Code2 != oldClaimCondCodeLog.Code2) {
				if(command!=""){ command+=",";}
				command+="Code2 = '"+POut.String(claimCondCodeLog.Code2)+"'";
			}
			if(claimCondCodeLog.Code3 != oldClaimCondCodeLog.Code3) {
				if(command!=""){ command+=",";}
				command+="Code3 = '"+POut.String(claimCondCodeLog.Code3)+"'";
			}
			if(claimCondCodeLog.Code4 != oldClaimCondCodeLog.Code4) {
				if(command!=""){ command+=",";}
				command+="Code4 = '"+POut.String(claimCondCodeLog.Code4)+"'";
			}
			if(claimCondCodeLog.Code5 != oldClaimCondCodeLog.Code5) {
				if(command!=""){ command+=",";}
				command+="Code5 = '"+POut.String(claimCondCodeLog.Code5)+"'";
			}
			if(claimCondCodeLog.Code6 != oldClaimCondCodeLog.Code6) {
				if(command!=""){ command+=",";}
				command+="Code6 = '"+POut.String(claimCondCodeLog.Code6)+"'";
			}
			if(claimCondCodeLog.Code7 != oldClaimCondCodeLog.Code7) {
				if(command!=""){ command+=",";}
				command+="Code7 = '"+POut.String(claimCondCodeLog.Code7)+"'";
			}
			if(claimCondCodeLog.Code8 != oldClaimCondCodeLog.Code8) {
				if(command!=""){ command+=",";}
				command+="Code8 = '"+POut.String(claimCondCodeLog.Code8)+"'";
			}
			if(claimCondCodeLog.Code9 != oldClaimCondCodeLog.Code9) {
				if(command!=""){ command+=",";}
				command+="Code9 = '"+POut.String(claimCondCodeLog.Code9)+"'";
			}
			if(claimCondCodeLog.Code10 != oldClaimCondCodeLog.Code10) {
				if(command!=""){ command+=",";}
				command+="Code10 = '"+POut.String(claimCondCodeLog.Code10)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE claimcondcodelog SET "+command
				+" WHERE ClaimCondCodeLogNum = "+POut.Long(claimCondCodeLog.ClaimCondCodeLogNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one ClaimCondCodeLog from the database.</summary>
		internal static void Delete(long claimCondCodeLogNum){
			string command="DELETE FROM claimcondcodelog "
				+"WHERE ClaimCondCodeLogNum = "+POut.Long(claimCondCodeLogNum);
			Db.NonQ(command);
		}

	}
}