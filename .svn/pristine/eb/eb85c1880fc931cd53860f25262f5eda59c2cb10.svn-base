//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AccountingAutoPayCrud {
		///<summary>Gets one AccountingAutoPay object from the database using the primary key.  Returns null if not found.</summary>
		internal static AccountingAutoPay SelectOne(long accountingAutoPayNum){
			string command="SELECT * FROM accountingautopay "
				+"WHERE AccountingAutoPayNum = "+POut.Long(accountingAutoPayNum);
			List<AccountingAutoPay> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AccountingAutoPay object from the database using a query.</summary>
		internal static AccountingAutoPay SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AccountingAutoPay> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AccountingAutoPay objects from the database using a query.</summary>
		internal static List<AccountingAutoPay> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AccountingAutoPay> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<AccountingAutoPay> TableToList(DataTable table){
			List<AccountingAutoPay> retVal=new List<AccountingAutoPay>();
			AccountingAutoPay accountingAutoPay;
			for(int i=0;i<table.Rows.Count;i++) {
				accountingAutoPay=new AccountingAutoPay();
				accountingAutoPay.AccountingAutoPayNum= PIn.Long  (table.Rows[i]["AccountingAutoPayNum"].ToString());
				accountingAutoPay.PayType             = PIn.Long  (table.Rows[i]["PayType"].ToString());
				accountingAutoPay.PickList            = PIn.String(table.Rows[i]["PickList"].ToString());
				retVal.Add(accountingAutoPay);
			}
			return retVal;
		}

		///<summary>Inserts one AccountingAutoPay into the database.  Returns the new priKey.</summary>
		internal static long Insert(AccountingAutoPay accountingAutoPay){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				accountingAutoPay.AccountingAutoPayNum=DbHelper.GetNextOracleKey("accountingautopay","AccountingAutoPayNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(accountingAutoPay,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							accountingAutoPay.AccountingAutoPayNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(accountingAutoPay,false);
			}
		}

		///<summary>Inserts one AccountingAutoPay into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(AccountingAutoPay accountingAutoPay,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				accountingAutoPay.AccountingAutoPayNum=ReplicationServers.GetKey("accountingautopay","AccountingAutoPayNum");
			}
			string command="INSERT INTO accountingautopay (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AccountingAutoPayNum,";
			}
			command+="PayType,PickList) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(accountingAutoPay.AccountingAutoPayNum)+",";
			}
			command+=
				     POut.Long  (accountingAutoPay.PayType)+","
				+"'"+POut.String(accountingAutoPay.PickList)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				accountingAutoPay.AccountingAutoPayNum=Db.NonQ(command,true);
			}
			return accountingAutoPay.AccountingAutoPayNum;
		}

		///<summary>Updates one AccountingAutoPay in the database.</summary>
		internal static void Update(AccountingAutoPay accountingAutoPay){
			string command="UPDATE accountingautopay SET "
				+"PayType             =  "+POut.Long  (accountingAutoPay.PayType)+", "
				+"PickList            = '"+POut.String(accountingAutoPay.PickList)+"' "
				+"WHERE AccountingAutoPayNum = "+POut.Long(accountingAutoPay.AccountingAutoPayNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AccountingAutoPay in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(AccountingAutoPay accountingAutoPay,AccountingAutoPay oldAccountingAutoPay){
			string command="";
			if(accountingAutoPay.PayType != oldAccountingAutoPay.PayType) {
				if(command!=""){ command+=",";}
				command+="PayType = "+POut.Long(accountingAutoPay.PayType)+"";
			}
			if(accountingAutoPay.PickList != oldAccountingAutoPay.PickList) {
				if(command!=""){ command+=",";}
				command+="PickList = '"+POut.String(accountingAutoPay.PickList)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE accountingautopay SET "+command
				+" WHERE AccountingAutoPayNum = "+POut.Long(accountingAutoPay.AccountingAutoPayNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AccountingAutoPay from the database.</summary>
		internal static void Delete(long accountingAutoPayNum){
			string command="DELETE FROM accountingautopay "
				+"WHERE AccountingAutoPayNum = "+POut.Long(accountingAutoPayNum);
			Db.NonQ(command);
		}

	}
}