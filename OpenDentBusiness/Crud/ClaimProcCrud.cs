//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ClaimProcCrud {
		///<summary>Gets one ClaimProc object from the database using the primary key.  Returns null if not found.</summary>
		internal static ClaimProc SelectOne(long claimProcNum){
			string command="SELECT * FROM claimproc "
				+"WHERE ClaimProcNum = "+POut.Long(claimProcNum);
			List<ClaimProc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ClaimProc object from the database using a query.</summary>
		internal static ClaimProc SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ClaimProc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ClaimProc objects from the database using a query.</summary>
		internal static List<ClaimProc> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ClaimProc> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<ClaimProc> TableToList(DataTable table){
			List<ClaimProc> retVal=new List<ClaimProc>();
			ClaimProc claimProc;
			for(int i=0;i<table.Rows.Count;i++) {
				claimProc=new ClaimProc();
				claimProc.ClaimProcNum        = PIn.Long  (table.Rows[i]["ClaimProcNum"].ToString());
				claimProc.ProcNum             = PIn.Long  (table.Rows[i]["ProcNum"].ToString());
				claimProc.ClaimNum            = PIn.Long  (table.Rows[i]["ClaimNum"].ToString());
				claimProc.PatNum              = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				claimProc.ProvNum             = PIn.Long  (table.Rows[i]["ProvNum"].ToString());
				claimProc.FeeBilled           = PIn.Double(table.Rows[i]["FeeBilled"].ToString());
				claimProc.InsPayEst           = PIn.Double(table.Rows[i]["InsPayEst"].ToString());
				claimProc.DedApplied          = PIn.Double(table.Rows[i]["DedApplied"].ToString());
				claimProc.Status              = (ClaimProcStatus)PIn.Int(table.Rows[i]["Status"].ToString());
				claimProc.InsPayAmt           = PIn.Double(table.Rows[i]["InsPayAmt"].ToString());
				claimProc.Remarks             = PIn.String(table.Rows[i]["Remarks"].ToString());
				claimProc.ClaimPaymentNum     = PIn.Long  (table.Rows[i]["ClaimPaymentNum"].ToString());
				claimProc.PlanNum             = PIn.Long  (table.Rows[i]["PlanNum"].ToString());
				claimProc.DateCP              = PIn.Date  (table.Rows[i]["DateCP"].ToString());
				claimProc.WriteOff            = PIn.Double(table.Rows[i]["WriteOff"].ToString());
				claimProc.CodeSent            = PIn.String(table.Rows[i]["CodeSent"].ToString());
				claimProc.AllowedOverride     = PIn.Double(table.Rows[i]["AllowedOverride"].ToString());
				claimProc.Percentage          = PIn.Int   (table.Rows[i]["Percentage"].ToString());
				claimProc.PercentOverride     = PIn.Int   (table.Rows[i]["PercentOverride"].ToString());
				claimProc.CopayAmt            = PIn.Double(table.Rows[i]["CopayAmt"].ToString());
				claimProc.NoBillIns           = PIn.Bool  (table.Rows[i]["NoBillIns"].ToString());
				claimProc.PaidOtherIns        = PIn.Double(table.Rows[i]["PaidOtherIns"].ToString());
				claimProc.BaseEst             = PIn.Double(table.Rows[i]["BaseEst"].ToString());
				claimProc.CopayOverride       = PIn.Double(table.Rows[i]["CopayOverride"].ToString());
				claimProc.ProcDate            = PIn.Date  (table.Rows[i]["ProcDate"].ToString());
				claimProc.DateEntry           = PIn.Date  (table.Rows[i]["DateEntry"].ToString());
				claimProc.LineNumber          = PIn.Byte  (table.Rows[i]["LineNumber"].ToString());
				claimProc.DedEst              = PIn.Double(table.Rows[i]["DedEst"].ToString());
				claimProc.DedEstOverride      = PIn.Double(table.Rows[i]["DedEstOverride"].ToString());
				claimProc.InsEstTotal         = PIn.Double(table.Rows[i]["InsEstTotal"].ToString());
				claimProc.InsEstTotalOverride = PIn.Double(table.Rows[i]["InsEstTotalOverride"].ToString());
				claimProc.PaidOtherInsOverride= PIn.Double(table.Rows[i]["PaidOtherInsOverride"].ToString());
				claimProc.EstimateNote        = PIn.String(table.Rows[i]["EstimateNote"].ToString());
				claimProc.WriteOffEst         = PIn.Double(table.Rows[i]["WriteOffEst"].ToString());
				claimProc.WriteOffEstOverride = PIn.Double(table.Rows[i]["WriteOffEstOverride"].ToString());
				claimProc.ClinicNum           = PIn.Long  (table.Rows[i]["ClinicNum"].ToString());
				claimProc.InsSubNum           = PIn.Long  (table.Rows[i]["InsSubNum"].ToString());
				claimProc.PaymentRow          = PIn.Int   (table.Rows[i]["PaymentRow"].ToString());
				retVal.Add(claimProc);
			}
			return retVal;
		}

		///<summary>Inserts one ClaimProc into the database.  Returns the new priKey.</summary>
		internal static long Insert(ClaimProc claimProc){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				claimProc.ClaimProcNum=DbHelper.GetNextOracleKey("claimproc","ClaimProcNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(claimProc,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							claimProc.ClaimProcNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(claimProc,false);
			}
		}

		///<summary>Inserts one ClaimProc into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(ClaimProc claimProc,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				claimProc.ClaimProcNum=ReplicationServers.GetKey("claimproc","ClaimProcNum");
			}
			string command="INSERT INTO claimproc (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ClaimProcNum,";
			}
			command+="ProcNum,ClaimNum,PatNum,ProvNum,FeeBilled,InsPayEst,DedApplied,Status,InsPayAmt,Remarks,ClaimPaymentNum,PlanNum,DateCP,WriteOff,CodeSent,AllowedOverride,Percentage,PercentOverride,CopayAmt,NoBillIns,PaidOtherIns,BaseEst,CopayOverride,ProcDate,DateEntry,LineNumber,DedEst,DedEstOverride,InsEstTotal,InsEstTotalOverride,PaidOtherInsOverride,EstimateNote,WriteOffEst,WriteOffEstOverride,ClinicNum,InsSubNum,PaymentRow) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(claimProc.ClaimProcNum)+",";
			}
			command+=
				     POut.Long  (claimProc.ProcNum)+","
				+    POut.Long  (claimProc.ClaimNum)+","
				+    POut.Long  (claimProc.PatNum)+","
				+    POut.Long  (claimProc.ProvNum)+","
				+"'"+POut.Double(claimProc.FeeBilled)+"',"
				+"'"+POut.Double(claimProc.InsPayEst)+"',"
				+"'"+POut.Double(claimProc.DedApplied)+"',"
				+    POut.Int   ((int)claimProc.Status)+","
				+"'"+POut.Double(claimProc.InsPayAmt)+"',"
				+"'"+POut.String(claimProc.Remarks)+"',"
				+    POut.Long  (claimProc.ClaimPaymentNum)+","
				+    POut.Long  (claimProc.PlanNum)+","
				+    POut.Date  (claimProc.DateCP)+","
				+"'"+POut.Double(claimProc.WriteOff)+"',"
				+"'"+POut.String(claimProc.CodeSent)+"',"
				+"'"+POut.Double(claimProc.AllowedOverride)+"',"
				+    POut.Int   (claimProc.Percentage)+","
				+    POut.Int   (claimProc.PercentOverride)+","
				+"'"+POut.Double(claimProc.CopayAmt)+"',"
				+    POut.Bool  (claimProc.NoBillIns)+","
				+"'"+POut.Double(claimProc.PaidOtherIns)+"',"
				+"'"+POut.Double(claimProc.BaseEst)+"',"
				+"'"+POut.Double(claimProc.CopayOverride)+"',"
				+    POut.Date  (claimProc.ProcDate)+","
				+    POut.Date  (claimProc.DateEntry)+","
				+    POut.Byte  (claimProc.LineNumber)+","
				+"'"+POut.Double(claimProc.DedEst)+"',"
				+"'"+POut.Double(claimProc.DedEstOverride)+"',"
				+"'"+POut.Double(claimProc.InsEstTotal)+"',"
				+"'"+POut.Double(claimProc.InsEstTotalOverride)+"',"
				+"'"+POut.Double(claimProc.PaidOtherInsOverride)+"',"
				+"'"+POut.String(claimProc.EstimateNote)+"',"
				+"'"+POut.Double(claimProc.WriteOffEst)+"',"
				+"'"+POut.Double(claimProc.WriteOffEstOverride)+"',"
				+    POut.Long  (claimProc.ClinicNum)+","
				+    POut.Long  (claimProc.InsSubNum)+","
				+    POut.Int   (claimProc.PaymentRow)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				claimProc.ClaimProcNum=Db.NonQ(command,true);
			}
			return claimProc.ClaimProcNum;
		}

		///<summary>Updates one ClaimProc in the database.</summary>
		internal static void Update(ClaimProc claimProc){
			string command="UPDATE claimproc SET "
				+"ProcNum             =  "+POut.Long  (claimProc.ProcNum)+", "
				+"ClaimNum            =  "+POut.Long  (claimProc.ClaimNum)+", "
				+"PatNum              =  "+POut.Long  (claimProc.PatNum)+", "
				+"ProvNum             =  "+POut.Long  (claimProc.ProvNum)+", "
				+"FeeBilled           = '"+POut.Double(claimProc.FeeBilled)+"', "
				+"InsPayEst           = '"+POut.Double(claimProc.InsPayEst)+"', "
				+"DedApplied          = '"+POut.Double(claimProc.DedApplied)+"', "
				+"Status              =  "+POut.Int   ((int)claimProc.Status)+", "
				+"InsPayAmt           = '"+POut.Double(claimProc.InsPayAmt)+"', "
				+"Remarks             = '"+POut.String(claimProc.Remarks)+"', "
				+"ClaimPaymentNum     =  "+POut.Long  (claimProc.ClaimPaymentNum)+", "
				+"PlanNum             =  "+POut.Long  (claimProc.PlanNum)+", "
				+"DateCP              =  "+POut.Date  (claimProc.DateCP)+", "
				+"WriteOff            = '"+POut.Double(claimProc.WriteOff)+"', "
				+"CodeSent            = '"+POut.String(claimProc.CodeSent)+"', "
				+"AllowedOverride     = '"+POut.Double(claimProc.AllowedOverride)+"', "
				+"Percentage          =  "+POut.Int   (claimProc.Percentage)+", "
				+"PercentOverride     =  "+POut.Int   (claimProc.PercentOverride)+", "
				+"CopayAmt            = '"+POut.Double(claimProc.CopayAmt)+"', "
				+"NoBillIns           =  "+POut.Bool  (claimProc.NoBillIns)+", "
				+"PaidOtherIns        = '"+POut.Double(claimProc.PaidOtherIns)+"', "
				+"BaseEst             = '"+POut.Double(claimProc.BaseEst)+"', "
				+"CopayOverride       = '"+POut.Double(claimProc.CopayOverride)+"', "
				+"ProcDate            =  "+POut.Date  (claimProc.ProcDate)+", "
				+"DateEntry           =  "+POut.Date  (claimProc.DateEntry)+", "
				+"LineNumber          =  "+POut.Byte  (claimProc.LineNumber)+", "
				+"DedEst              = '"+POut.Double(claimProc.DedEst)+"', "
				+"DedEstOverride      = '"+POut.Double(claimProc.DedEstOverride)+"', "
				+"InsEstTotal         = '"+POut.Double(claimProc.InsEstTotal)+"', "
				+"InsEstTotalOverride = '"+POut.Double(claimProc.InsEstTotalOverride)+"', "
				+"PaidOtherInsOverride= '"+POut.Double(claimProc.PaidOtherInsOverride)+"', "
				+"EstimateNote        = '"+POut.String(claimProc.EstimateNote)+"', "
				+"WriteOffEst         = '"+POut.Double(claimProc.WriteOffEst)+"', "
				+"WriteOffEstOverride = '"+POut.Double(claimProc.WriteOffEstOverride)+"', "
				+"ClinicNum           =  "+POut.Long  (claimProc.ClinicNum)+", "
				+"InsSubNum           =  "+POut.Long  (claimProc.InsSubNum)+", "
				+"PaymentRow          =  "+POut.Int   (claimProc.PaymentRow)+" "
				+"WHERE ClaimProcNum = "+POut.Long(claimProc.ClaimProcNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ClaimProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(ClaimProc claimProc,ClaimProc oldClaimProc){
			string command="";
			if(claimProc.ProcNum != oldClaimProc.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(claimProc.ProcNum)+"";
			}
			if(claimProc.ClaimNum != oldClaimProc.ClaimNum) {
				if(command!=""){ command+=",";}
				command+="ClaimNum = "+POut.Long(claimProc.ClaimNum)+"";
			}
			if(claimProc.PatNum != oldClaimProc.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(claimProc.PatNum)+"";
			}
			if(claimProc.ProvNum != oldClaimProc.ProvNum) {
				if(command!=""){ command+=",";}
				command+="ProvNum = "+POut.Long(claimProc.ProvNum)+"";
			}
			if(claimProc.FeeBilled != oldClaimProc.FeeBilled) {
				if(command!=""){ command+=",";}
				command+="FeeBilled = '"+POut.Double(claimProc.FeeBilled)+"'";
			}
			if(claimProc.InsPayEst != oldClaimProc.InsPayEst) {
				if(command!=""){ command+=",";}
				command+="InsPayEst = '"+POut.Double(claimProc.InsPayEst)+"'";
			}
			if(claimProc.DedApplied != oldClaimProc.DedApplied) {
				if(command!=""){ command+=",";}
				command+="DedApplied = '"+POut.Double(claimProc.DedApplied)+"'";
			}
			if(claimProc.Status != oldClaimProc.Status) {
				if(command!=""){ command+=",";}
				command+="Status = "+POut.Int   ((int)claimProc.Status)+"";
			}
			if(claimProc.InsPayAmt != oldClaimProc.InsPayAmt) {
				if(command!=""){ command+=",";}
				command+="InsPayAmt = '"+POut.Double(claimProc.InsPayAmt)+"'";
			}
			if(claimProc.Remarks != oldClaimProc.Remarks) {
				if(command!=""){ command+=",";}
				command+="Remarks = '"+POut.String(claimProc.Remarks)+"'";
			}
			if(claimProc.ClaimPaymentNum != oldClaimProc.ClaimPaymentNum) {
				if(command!=""){ command+=",";}
				command+="ClaimPaymentNum = "+POut.Long(claimProc.ClaimPaymentNum)+"";
			}
			if(claimProc.PlanNum != oldClaimProc.PlanNum) {
				if(command!=""){ command+=",";}
				command+="PlanNum = "+POut.Long(claimProc.PlanNum)+"";
			}
			if(claimProc.DateCP != oldClaimProc.DateCP) {
				if(command!=""){ command+=",";}
				command+="DateCP = "+POut.Date(claimProc.DateCP)+"";
			}
			if(claimProc.WriteOff != oldClaimProc.WriteOff) {
				if(command!=""){ command+=",";}
				command+="WriteOff = '"+POut.Double(claimProc.WriteOff)+"'";
			}
			if(claimProc.CodeSent != oldClaimProc.CodeSent) {
				if(command!=""){ command+=",";}
				command+="CodeSent = '"+POut.String(claimProc.CodeSent)+"'";
			}
			if(claimProc.AllowedOverride != oldClaimProc.AllowedOverride) {
				if(command!=""){ command+=",";}
				command+="AllowedOverride = '"+POut.Double(claimProc.AllowedOverride)+"'";
			}
			if(claimProc.Percentage != oldClaimProc.Percentage) {
				if(command!=""){ command+=",";}
				command+="Percentage = "+POut.Int(claimProc.Percentage)+"";
			}
			if(claimProc.PercentOverride != oldClaimProc.PercentOverride) {
				if(command!=""){ command+=",";}
				command+="PercentOverride = "+POut.Int(claimProc.PercentOverride)+"";
			}
			if(claimProc.CopayAmt != oldClaimProc.CopayAmt) {
				if(command!=""){ command+=",";}
				command+="CopayAmt = '"+POut.Double(claimProc.CopayAmt)+"'";
			}
			if(claimProc.NoBillIns != oldClaimProc.NoBillIns) {
				if(command!=""){ command+=",";}
				command+="NoBillIns = "+POut.Bool(claimProc.NoBillIns)+"";
			}
			if(claimProc.PaidOtherIns != oldClaimProc.PaidOtherIns) {
				if(command!=""){ command+=",";}
				command+="PaidOtherIns = '"+POut.Double(claimProc.PaidOtherIns)+"'";
			}
			if(claimProc.BaseEst != oldClaimProc.BaseEst) {
				if(command!=""){ command+=",";}
				command+="BaseEst = '"+POut.Double(claimProc.BaseEst)+"'";
			}
			if(claimProc.CopayOverride != oldClaimProc.CopayOverride) {
				if(command!=""){ command+=",";}
				command+="CopayOverride = '"+POut.Double(claimProc.CopayOverride)+"'";
			}
			if(claimProc.ProcDate != oldClaimProc.ProcDate) {
				if(command!=""){ command+=",";}
				command+="ProcDate = "+POut.Date(claimProc.ProcDate)+"";
			}
			if(claimProc.DateEntry != oldClaimProc.DateEntry) {
				if(command!=""){ command+=",";}
				command+="DateEntry = "+POut.Date(claimProc.DateEntry)+"";
			}
			if(claimProc.LineNumber != oldClaimProc.LineNumber) {
				if(command!=""){ command+=",";}
				command+="LineNumber = "+POut.Byte(claimProc.LineNumber)+"";
			}
			if(claimProc.DedEst != oldClaimProc.DedEst) {
				if(command!=""){ command+=",";}
				command+="DedEst = '"+POut.Double(claimProc.DedEst)+"'";
			}
			if(claimProc.DedEstOverride != oldClaimProc.DedEstOverride) {
				if(command!=""){ command+=",";}
				command+="DedEstOverride = '"+POut.Double(claimProc.DedEstOverride)+"'";
			}
			if(claimProc.InsEstTotal != oldClaimProc.InsEstTotal) {
				if(command!=""){ command+=",";}
				command+="InsEstTotal = '"+POut.Double(claimProc.InsEstTotal)+"'";
			}
			if(claimProc.InsEstTotalOverride != oldClaimProc.InsEstTotalOverride) {
				if(command!=""){ command+=",";}
				command+="InsEstTotalOverride = '"+POut.Double(claimProc.InsEstTotalOverride)+"'";
			}
			if(claimProc.PaidOtherInsOverride != oldClaimProc.PaidOtherInsOverride) {
				if(command!=""){ command+=",";}
				command+="PaidOtherInsOverride = '"+POut.Double(claimProc.PaidOtherInsOverride)+"'";
			}
			if(claimProc.EstimateNote != oldClaimProc.EstimateNote) {
				if(command!=""){ command+=",";}
				command+="EstimateNote = '"+POut.String(claimProc.EstimateNote)+"'";
			}
			if(claimProc.WriteOffEst != oldClaimProc.WriteOffEst) {
				if(command!=""){ command+=",";}
				command+="WriteOffEst = '"+POut.Double(claimProc.WriteOffEst)+"'";
			}
			if(claimProc.WriteOffEstOverride != oldClaimProc.WriteOffEstOverride) {
				if(command!=""){ command+=",";}
				command+="WriteOffEstOverride = '"+POut.Double(claimProc.WriteOffEstOverride)+"'";
			}
			if(claimProc.ClinicNum != oldClaimProc.ClinicNum) {
				if(command!=""){ command+=",";}
				command+="ClinicNum = "+POut.Long(claimProc.ClinicNum)+"";
			}
			if(claimProc.InsSubNum != oldClaimProc.InsSubNum) {
				if(command!=""){ command+=",";}
				command+="InsSubNum = "+POut.Long(claimProc.InsSubNum)+"";
			}
			if(claimProc.PaymentRow != oldClaimProc.PaymentRow) {
				if(command!=""){ command+=",";}
				command+="PaymentRow = "+POut.Int(claimProc.PaymentRow)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE claimproc SET "+command
				+" WHERE ClaimProcNum = "+POut.Long(claimProc.ClaimProcNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one ClaimProc from the database.</summary>
		internal static void Delete(long claimProcNum){
			string command="DELETE FROM claimproc "
				+"WHERE ClaimProcNum = "+POut.Long(claimProcNum);
			Db.NonQ(command);
		}

	}
}