//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ContactCrud {
		///<summary>Gets one Contact object from the database using the primary key.  Returns null if not found.</summary>
		internal static Contact SelectOne(long contactNum){
			string command="SELECT * FROM contact "
				+"WHERE ContactNum = "+POut.Long(contactNum);
			List<Contact> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Contact object from the database using a query.</summary>
		internal static Contact SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Contact> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Contact objects from the database using a query.</summary>
		internal static List<Contact> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Contact> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Contact> TableToList(DataTable table){
			List<Contact> retVal=new List<Contact>();
			Contact contact;
			for(int i=0;i<table.Rows.Count;i++) {
				contact=new Contact();
				contact.ContactNum= PIn.Long  (table.Rows[i]["ContactNum"].ToString());
				contact.LName     = PIn.String(table.Rows[i]["LName"].ToString());
				contact.FName     = PIn.String(table.Rows[i]["FName"].ToString());
				contact.WkPhone   = PIn.String(table.Rows[i]["WkPhone"].ToString());
				contact.Fax       = PIn.String(table.Rows[i]["Fax"].ToString());
				contact.Category  = PIn.Long  (table.Rows[i]["Category"].ToString());
				contact.Notes     = PIn.String(table.Rows[i]["Notes"].ToString());
				retVal.Add(contact);
			}
			return retVal;
		}

		///<summary>Inserts one Contact into the database.  Returns the new priKey.</summary>
		internal static long Insert(Contact contact){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				contact.ContactNum=DbHelper.GetNextOracleKey("contact","ContactNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(contact,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							contact.ContactNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(contact,false);
			}
		}

		///<summary>Inserts one Contact into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Contact contact,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				contact.ContactNum=ReplicationServers.GetKey("contact","ContactNum");
			}
			string command="INSERT INTO contact (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ContactNum,";
			}
			command+="LName,FName,WkPhone,Fax,Category,Notes) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(contact.ContactNum)+",";
			}
			command+=
				 "'"+POut.String(contact.LName)+"',"
				+"'"+POut.String(contact.FName)+"',"
				+"'"+POut.String(contact.WkPhone)+"',"
				+"'"+POut.String(contact.Fax)+"',"
				+    POut.Long  (contact.Category)+","
				+"'"+POut.String(contact.Notes)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				contact.ContactNum=Db.NonQ(command,true);
			}
			return contact.ContactNum;
		}

		///<summary>Updates one Contact in the database.</summary>
		internal static void Update(Contact contact){
			string command="UPDATE contact SET "
				+"LName     = '"+POut.String(contact.LName)+"', "
				+"FName     = '"+POut.String(contact.FName)+"', "
				+"WkPhone   = '"+POut.String(contact.WkPhone)+"', "
				+"Fax       = '"+POut.String(contact.Fax)+"', "
				+"Category  =  "+POut.Long  (contact.Category)+", "
				+"Notes     = '"+POut.String(contact.Notes)+"' "
				+"WHERE ContactNum = "+POut.Long(contact.ContactNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Contact in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Contact contact,Contact oldContact){
			string command="";
			if(contact.LName != oldContact.LName) {
				if(command!=""){ command+=",";}
				command+="LName = '"+POut.String(contact.LName)+"'";
			}
			if(contact.FName != oldContact.FName) {
				if(command!=""){ command+=",";}
				command+="FName = '"+POut.String(contact.FName)+"'";
			}
			if(contact.WkPhone != oldContact.WkPhone) {
				if(command!=""){ command+=",";}
				command+="WkPhone = '"+POut.String(contact.WkPhone)+"'";
			}
			if(contact.Fax != oldContact.Fax) {
				if(command!=""){ command+=",";}
				command+="Fax = '"+POut.String(contact.Fax)+"'";
			}
			if(contact.Category != oldContact.Category) {
				if(command!=""){ command+=",";}
				command+="Category = "+POut.Long(contact.Category)+"";
			}
			if(contact.Notes != oldContact.Notes) {
				if(command!=""){ command+=",";}
				command+="Notes = '"+POut.String(contact.Notes)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE contact SET "+command
				+" WHERE ContactNum = "+POut.Long(contact.ContactNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Contact from the database.</summary>
		internal static void Delete(long contactNum){
			string command="DELETE FROM contact "
				+"WHERE ContactNum = "+POut.Long(contactNum);
			Db.NonQ(command);
		}

	}
}