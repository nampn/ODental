//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class CountyCrud {
		///<summary>Gets one County object from the database using the primary key.  Returns null if not found.</summary>
		internal static County SelectOne(long countyNum){
			string command="SELECT * FROM county "
				+"WHERE CountyNum = "+POut.Long(countyNum);
			List<County> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one County object from the database using a query.</summary>
		internal static County SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<County> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of County objects from the database using a query.</summary>
		internal static List<County> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<County> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<County> TableToList(DataTable table){
			List<County> retVal=new List<County>();
			County county;
			for(int i=0;i<table.Rows.Count;i++) {
				county=new County();
				county.CountyNum = PIn.Long  (table.Rows[i]["CountyNum"].ToString());
				county.CountyName= PIn.String(table.Rows[i]["CountyName"].ToString());
				county.CountyCode= PIn.String(table.Rows[i]["CountyCode"].ToString());
				retVal.Add(county);
			}
			return retVal;
		}

		///<summary>Inserts one County into the database.  Returns the new priKey.</summary>
		internal static long Insert(County county){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				county.CountyNum=DbHelper.GetNextOracleKey("county","CountyNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(county,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							county.CountyNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(county,false);
			}
		}

		///<summary>Inserts one County into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(County county,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				county.CountyNum=ReplicationServers.GetKey("county","CountyNum");
			}
			string command="INSERT INTO county (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CountyNum,";
			}
			command+="CountyName,CountyCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(county.CountyNum)+",";
			}
			command+=
				 "'"+POut.String(county.CountyName)+"',"
				+"'"+POut.String(county.CountyCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				county.CountyNum=Db.NonQ(command,true);
			}
			return county.CountyNum;
		}

		///<summary>Updates one County in the database.</summary>
		internal static void Update(County county){
			string command="UPDATE county SET "
				+"CountyName= '"+POut.String(county.CountyName)+"', "
				+"CountyCode= '"+POut.String(county.CountyCode)+"' "
				+"WHERE CountyNum = "+POut.Long(county.CountyNum);
			Db.NonQ(command);
		}

		///<summary>Updates one County in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(County county,County oldCounty){
			string command="";
			if(county.CountyName != oldCounty.CountyName) {
				if(command!=""){ command+=",";}
				command+="CountyName = '"+POut.String(county.CountyName)+"'";
			}
			if(county.CountyCode != oldCounty.CountyCode) {
				if(command!=""){ command+=",";}
				command+="CountyCode = '"+POut.String(county.CountyCode)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE county SET "+command
				+" WHERE CountyNum = "+POut.Long(county.CountyNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one County from the database.</summary>
		internal static void Delete(long countyNum){
			string command="DELETE FROM county "
				+"WHERE CountyNum = "+POut.Long(countyNum);
			Db.NonQ(command);
		}

	}
}