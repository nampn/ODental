//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class CovSpanCrud {
		///<summary>Gets one CovSpan object from the database using the primary key.  Returns null if not found.</summary>
		internal static CovSpan SelectOne(long covSpanNum){
			string command="SELECT * FROM covspan "
				+"WHERE CovSpanNum = "+POut.Long(covSpanNum);
			List<CovSpan> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one CovSpan object from the database using a query.</summary>
		internal static CovSpan SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CovSpan> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of CovSpan objects from the database using a query.</summary>
		internal static List<CovSpan> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CovSpan> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<CovSpan> TableToList(DataTable table){
			List<CovSpan> retVal=new List<CovSpan>();
			CovSpan covSpan;
			for(int i=0;i<table.Rows.Count;i++) {
				covSpan=new CovSpan();
				covSpan.CovSpanNum= PIn.Long  (table.Rows[i]["CovSpanNum"].ToString());
				covSpan.CovCatNum = PIn.Long  (table.Rows[i]["CovCatNum"].ToString());
				covSpan.FromCode  = PIn.String(table.Rows[i]["FromCode"].ToString());
				covSpan.ToCode    = PIn.String(table.Rows[i]["ToCode"].ToString());
				retVal.Add(covSpan);
			}
			return retVal;
		}

		///<summary>Inserts one CovSpan into the database.  Returns the new priKey.</summary>
		internal static long Insert(CovSpan covSpan){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				covSpan.CovSpanNum=DbHelper.GetNextOracleKey("covspan","CovSpanNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(covSpan,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							covSpan.CovSpanNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(covSpan,false);
			}
		}

		///<summary>Inserts one CovSpan into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(CovSpan covSpan,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				covSpan.CovSpanNum=ReplicationServers.GetKey("covspan","CovSpanNum");
			}
			string command="INSERT INTO covspan (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CovSpanNum,";
			}
			command+="CovCatNum,FromCode,ToCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(covSpan.CovSpanNum)+",";
			}
			command+=
				     POut.Long  (covSpan.CovCatNum)+","
				+"'"+POut.String(covSpan.FromCode)+"',"
				+"'"+POut.String(covSpan.ToCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				covSpan.CovSpanNum=Db.NonQ(command,true);
			}
			return covSpan.CovSpanNum;
		}

		///<summary>Updates one CovSpan in the database.</summary>
		internal static void Update(CovSpan covSpan){
			string command="UPDATE covspan SET "
				+"CovCatNum =  "+POut.Long  (covSpan.CovCatNum)+", "
				+"FromCode  = '"+POut.String(covSpan.FromCode)+"', "
				+"ToCode    = '"+POut.String(covSpan.ToCode)+"' "
				+"WHERE CovSpanNum = "+POut.Long(covSpan.CovSpanNum);
			Db.NonQ(command);
		}

		///<summary>Updates one CovSpan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(CovSpan covSpan,CovSpan oldCovSpan){
			string command="";
			if(covSpan.CovCatNum != oldCovSpan.CovCatNum) {
				if(command!=""){ command+=",";}
				command+="CovCatNum = "+POut.Long(covSpan.CovCatNum)+"";
			}
			if(covSpan.FromCode != oldCovSpan.FromCode) {
				if(command!=""){ command+=",";}
				command+="FromCode = '"+POut.String(covSpan.FromCode)+"'";
			}
			if(covSpan.ToCode != oldCovSpan.ToCode) {
				if(command!=""){ command+=",";}
				command+="ToCode = '"+POut.String(covSpan.ToCode)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE covspan SET "+command
				+" WHERE CovSpanNum = "+POut.Long(covSpan.CovSpanNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one CovSpan from the database.</summary>
		internal static void Delete(long covSpanNum){
			string command="DELETE FROM covspan "
				+"WHERE CovSpanNum = "+POut.Long(covSpanNum);
			Db.NonQ(command);
		}

	}
}