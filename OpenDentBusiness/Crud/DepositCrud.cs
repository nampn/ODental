//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class DepositCrud {
		///<summary>Gets one Deposit object from the database using the primary key.  Returns null if not found.</summary>
		internal static Deposit SelectOne(long depositNum){
			string command="SELECT * FROM deposit "
				+"WHERE DepositNum = "+POut.Long(depositNum);
			List<Deposit> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Deposit object from the database using a query.</summary>
		internal static Deposit SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Deposit> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Deposit objects from the database using a query.</summary>
		internal static List<Deposit> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Deposit> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Deposit> TableToList(DataTable table){
			List<Deposit> retVal=new List<Deposit>();
			Deposit deposit;
			for(int i=0;i<table.Rows.Count;i++) {
				deposit=new Deposit();
				deposit.DepositNum     = PIn.Long  (table.Rows[i]["DepositNum"].ToString());
				deposit.DateDeposit    = PIn.Date  (table.Rows[i]["DateDeposit"].ToString());
				deposit.BankAccountInfo= PIn.String(table.Rows[i]["BankAccountInfo"].ToString());
				deposit.Amount         = PIn.Double(table.Rows[i]["Amount"].ToString());
				retVal.Add(deposit);
			}
			return retVal;
		}

		///<summary>Inserts one Deposit into the database.  Returns the new priKey.</summary>
		internal static long Insert(Deposit deposit){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				deposit.DepositNum=DbHelper.GetNextOracleKey("deposit","DepositNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(deposit,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							deposit.DepositNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(deposit,false);
			}
		}

		///<summary>Inserts one Deposit into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Deposit deposit,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				deposit.DepositNum=ReplicationServers.GetKey("deposit","DepositNum");
			}
			string command="INSERT INTO deposit (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DepositNum,";
			}
			command+="DateDeposit,BankAccountInfo,Amount) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(deposit.DepositNum)+",";
			}
			command+=
				     POut.Date  (deposit.DateDeposit)+","
				+"'"+POut.String(deposit.BankAccountInfo)+"',"
				+"'"+POut.Double(deposit.Amount)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				deposit.DepositNum=Db.NonQ(command,true);
			}
			return deposit.DepositNum;
		}

		///<summary>Updates one Deposit in the database.</summary>
		internal static void Update(Deposit deposit){
			string command="UPDATE deposit SET "
				+"DateDeposit    =  "+POut.Date  (deposit.DateDeposit)+", "
				+"BankAccountInfo= '"+POut.String(deposit.BankAccountInfo)+"', "
				+"Amount         = '"+POut.Double(deposit.Amount)+"' "
				+"WHERE DepositNum = "+POut.Long(deposit.DepositNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Deposit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Deposit deposit,Deposit oldDeposit){
			string command="";
			if(deposit.DateDeposit != oldDeposit.DateDeposit) {
				if(command!=""){ command+=",";}
				command+="DateDeposit = "+POut.Date(deposit.DateDeposit)+"";
			}
			if(deposit.BankAccountInfo != oldDeposit.BankAccountInfo) {
				if(command!=""){ command+=",";}
				command+="BankAccountInfo = '"+POut.String(deposit.BankAccountInfo)+"'";
			}
			if(deposit.Amount != oldDeposit.Amount) {
				if(command!=""){ command+=",";}
				command+="Amount = '"+POut.Double(deposit.Amount)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE deposit SET "+command
				+" WHERE DepositNum = "+POut.Long(deposit.DepositNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Deposit from the database.</summary>
		internal static void Delete(long depositNum){
			string command="DELETE FROM deposit "
				+"WHERE DepositNum = "+POut.Long(depositNum);
			Db.NonQ(command);
		}

	}
}