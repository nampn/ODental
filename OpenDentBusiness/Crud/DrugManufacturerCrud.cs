//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class DrugManufacturerCrud {
		///<summary>Gets one DrugManufacturer object from the database using the primary key.  Returns null if not found.</summary>
		internal static DrugManufacturer SelectOne(long drugManufacturerNum){
			string command="SELECT * FROM drugmanufacturer "
				+"WHERE DrugManufacturerNum = "+POut.Long(drugManufacturerNum);
			List<DrugManufacturer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DrugManufacturer object from the database using a query.</summary>
		internal static DrugManufacturer SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DrugManufacturer> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of DrugManufacturer objects from the database using a query.</summary>
		internal static List<DrugManufacturer> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DrugManufacturer> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<DrugManufacturer> TableToList(DataTable table){
			List<DrugManufacturer> retVal=new List<DrugManufacturer>();
			DrugManufacturer drugManufacturer;
			for(int i=0;i<table.Rows.Count;i++) {
				drugManufacturer=new DrugManufacturer();
				drugManufacturer.DrugManufacturerNum= PIn.Long  (table.Rows[i]["DrugManufacturerNum"].ToString());
				drugManufacturer.ManufacturerName   = PIn.String(table.Rows[i]["ManufacturerName"].ToString());
				drugManufacturer.ManufacturerCode   = PIn.String(table.Rows[i]["ManufacturerCode"].ToString());
				retVal.Add(drugManufacturer);
			}
			return retVal;
		}

		///<summary>Inserts one DrugManufacturer into the database.  Returns the new priKey.</summary>
		internal static long Insert(DrugManufacturer drugManufacturer){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				drugManufacturer.DrugManufacturerNum=DbHelper.GetNextOracleKey("drugmanufacturer","DrugManufacturerNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(drugManufacturer,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							drugManufacturer.DrugManufacturerNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(drugManufacturer,false);
			}
		}

		///<summary>Inserts one DrugManufacturer into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(DrugManufacturer drugManufacturer,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				drugManufacturer.DrugManufacturerNum=ReplicationServers.GetKey("drugmanufacturer","DrugManufacturerNum");
			}
			string command="INSERT INTO drugmanufacturer (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DrugManufacturerNum,";
			}
			command+="ManufacturerName,ManufacturerCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(drugManufacturer.DrugManufacturerNum)+",";
			}
			command+=
				 "'"+POut.String(drugManufacturer.ManufacturerName)+"',"
				+"'"+POut.String(drugManufacturer.ManufacturerCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				drugManufacturer.DrugManufacturerNum=Db.NonQ(command,true);
			}
			return drugManufacturer.DrugManufacturerNum;
		}

		///<summary>Updates one DrugManufacturer in the database.</summary>
		internal static void Update(DrugManufacturer drugManufacturer){
			string command="UPDATE drugmanufacturer SET "
				+"ManufacturerName   = '"+POut.String(drugManufacturer.ManufacturerName)+"', "
				+"ManufacturerCode   = '"+POut.String(drugManufacturer.ManufacturerCode)+"' "
				+"WHERE DrugManufacturerNum = "+POut.Long(drugManufacturer.DrugManufacturerNum);
			Db.NonQ(command);
		}

		///<summary>Updates one DrugManufacturer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(DrugManufacturer drugManufacturer,DrugManufacturer oldDrugManufacturer){
			string command="";
			if(drugManufacturer.ManufacturerName != oldDrugManufacturer.ManufacturerName) {
				if(command!=""){ command+=",";}
				command+="ManufacturerName = '"+POut.String(drugManufacturer.ManufacturerName)+"'";
			}
			if(drugManufacturer.ManufacturerCode != oldDrugManufacturer.ManufacturerCode) {
				if(command!=""){ command+=",";}
				command+="ManufacturerCode = '"+POut.String(drugManufacturer.ManufacturerCode)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE drugmanufacturer SET "+command
				+" WHERE DrugManufacturerNum = "+POut.Long(drugManufacturer.DrugManufacturerNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one DrugManufacturer from the database.</summary>
		internal static void Delete(long drugManufacturerNum){
			string command="DELETE FROM drugmanufacturer "
				+"WHERE DrugManufacturerNum = "+POut.Long(drugManufacturerNum);
			Db.NonQ(command);
		}

	}
}