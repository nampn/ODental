//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class EhrMeasureCrud {
		///<summary>Gets one EhrMeasure object from the database using the primary key.  Returns null if not found.</summary>
		internal static EhrMeasure SelectOne(long ehrMeasureNum){
			string command="SELECT * FROM ehrmeasure "
				+"WHERE EhrMeasureNum = "+POut.Long(ehrMeasureNum);
			List<EhrMeasure> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EhrMeasure object from the database using a query.</summary>
		internal static EhrMeasure SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrMeasure> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EhrMeasure objects from the database using a query.</summary>
		internal static List<EhrMeasure> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrMeasure> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<EhrMeasure> TableToList(DataTable table){
			List<EhrMeasure> retVal=new List<EhrMeasure>();
			EhrMeasure ehrMeasure;
			for(int i=0;i<table.Rows.Count;i++) {
				ehrMeasure=new EhrMeasure();
				ehrMeasure.EhrMeasureNum= PIn.Long  (table.Rows[i]["EhrMeasureNum"].ToString());
				ehrMeasure.MeasureType  = (EhrMeasureType)PIn.Int(table.Rows[i]["MeasureType"].ToString());
				ehrMeasure.Numerator    = PIn.Int   (table.Rows[i]["Numerator"].ToString());
				ehrMeasure.Denominator  = PIn.Int   (table.Rows[i]["Denominator"].ToString());
				retVal.Add(ehrMeasure);
			}
			return retVal;
		}

		///<summary>Inserts one EhrMeasure into the database.  Returns the new priKey.</summary>
		internal static long Insert(EhrMeasure ehrMeasure){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				ehrMeasure.EhrMeasureNum=DbHelper.GetNextOracleKey("ehrmeasure","EhrMeasureNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(ehrMeasure,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							ehrMeasure.EhrMeasureNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(ehrMeasure,false);
			}
		}

		///<summary>Inserts one EhrMeasure into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(EhrMeasure ehrMeasure,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				ehrMeasure.EhrMeasureNum=ReplicationServers.GetKey("ehrmeasure","EhrMeasureNum");
			}
			string command="INSERT INTO ehrmeasure (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EhrMeasureNum,";
			}
			command+="MeasureType,Numerator,Denominator) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(ehrMeasure.EhrMeasureNum)+",";
			}
			command+=
				     POut.Int   ((int)ehrMeasure.MeasureType)+","
				+    POut.Int   (ehrMeasure.Numerator)+","
				+    POut.Int   (ehrMeasure.Denominator)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				ehrMeasure.EhrMeasureNum=Db.NonQ(command,true);
			}
			return ehrMeasure.EhrMeasureNum;
		}

		///<summary>Updates one EhrMeasure in the database.</summary>
		internal static void Update(EhrMeasure ehrMeasure){
			string command="UPDATE ehrmeasure SET "
				+"MeasureType  =  "+POut.Int   ((int)ehrMeasure.MeasureType)+", "
				+"Numerator    =  "+POut.Int   (ehrMeasure.Numerator)+", "
				+"Denominator  =  "+POut.Int   (ehrMeasure.Denominator)+" "
				+"WHERE EhrMeasureNum = "+POut.Long(ehrMeasure.EhrMeasureNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EhrMeasure in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(EhrMeasure ehrMeasure,EhrMeasure oldEhrMeasure){
			string command="";
			if(ehrMeasure.MeasureType != oldEhrMeasure.MeasureType) {
				if(command!=""){ command+=",";}
				command+="MeasureType = "+POut.Int   ((int)ehrMeasure.MeasureType)+"";
			}
			if(ehrMeasure.Numerator != oldEhrMeasure.Numerator) {
				if(command!=""){ command+=",";}
				command+="Numerator = "+POut.Int(ehrMeasure.Numerator)+"";
			}
			if(ehrMeasure.Denominator != oldEhrMeasure.Denominator) {
				if(command!=""){ command+=",";}
				command+="Denominator = "+POut.Int(ehrMeasure.Denominator)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE ehrmeasure SET "+command
				+" WHERE EhrMeasureNum = "+POut.Long(ehrMeasure.EhrMeasureNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one EhrMeasure from the database.</summary>
		internal static void Delete(long ehrMeasureNum){
			string command="DELETE FROM ehrmeasure "
				+"WHERE EhrMeasureNum = "+POut.Long(ehrMeasureNum);
			Db.NonQ(command);
		}

	}
}