//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class EmailAttachCrud {
		///<summary>Gets one EmailAttach object from the database using the primary key.  Returns null if not found.</summary>
		internal static EmailAttach SelectOne(long emailAttachNum){
			string command="SELECT * FROM emailattach "
				+"WHERE EmailAttachNum = "+POut.Long(emailAttachNum);
			List<EmailAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one EmailAttach object from the database using a query.</summary>
		internal static EmailAttach SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of EmailAttach objects from the database using a query.</summary>
		internal static List<EmailAttach> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EmailAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<EmailAttach> TableToList(DataTable table){
			List<EmailAttach> retVal=new List<EmailAttach>();
			EmailAttach emailAttach;
			for(int i=0;i<table.Rows.Count;i++) {
				emailAttach=new EmailAttach();
				emailAttach.EmailAttachNum   = PIn.Long  (table.Rows[i]["EmailAttachNum"].ToString());
				emailAttach.EmailMessageNum  = PIn.Long  (table.Rows[i]["EmailMessageNum"].ToString());
				emailAttach.DisplayedFileName= PIn.String(table.Rows[i]["DisplayedFileName"].ToString());
				emailAttach.ActualFileName   = PIn.String(table.Rows[i]["ActualFileName"].ToString());
				retVal.Add(emailAttach);
			}
			return retVal;
		}

		///<summary>Inserts one EmailAttach into the database.  Returns the new priKey.</summary>
		internal static long Insert(EmailAttach emailAttach){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				emailAttach.EmailAttachNum=DbHelper.GetNextOracleKey("emailattach","EmailAttachNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(emailAttach,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							emailAttach.EmailAttachNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(emailAttach,false);
			}
		}

		///<summary>Inserts one EmailAttach into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(EmailAttach emailAttach,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				emailAttach.EmailAttachNum=ReplicationServers.GetKey("emailattach","EmailAttachNum");
			}
			string command="INSERT INTO emailattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmailAttachNum,";
			}
			command+="EmailMessageNum,DisplayedFileName,ActualFileName) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(emailAttach.EmailAttachNum)+",";
			}
			command+=
				     POut.Long  (emailAttach.EmailMessageNum)+","
				+"'"+POut.String(emailAttach.DisplayedFileName)+"',"
				+"'"+POut.String(emailAttach.ActualFileName)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				emailAttach.EmailAttachNum=Db.NonQ(command,true);
			}
			return emailAttach.EmailAttachNum;
		}

		///<summary>Updates one EmailAttach in the database.</summary>
		internal static void Update(EmailAttach emailAttach){
			string command="UPDATE emailattach SET "
				+"EmailMessageNum  =  "+POut.Long  (emailAttach.EmailMessageNum)+", "
				+"DisplayedFileName= '"+POut.String(emailAttach.DisplayedFileName)+"', "
				+"ActualFileName   = '"+POut.String(emailAttach.ActualFileName)+"' "
				+"WHERE EmailAttachNum = "+POut.Long(emailAttach.EmailAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one EmailAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(EmailAttach emailAttach,EmailAttach oldEmailAttach){
			string command="";
			if(emailAttach.EmailMessageNum != oldEmailAttach.EmailMessageNum) {
				if(command!=""){ command+=",";}
				command+="EmailMessageNum = "+POut.Long(emailAttach.EmailMessageNum)+"";
			}
			if(emailAttach.DisplayedFileName != oldEmailAttach.DisplayedFileName) {
				if(command!=""){ command+=",";}
				command+="DisplayedFileName = '"+POut.String(emailAttach.DisplayedFileName)+"'";
			}
			if(emailAttach.ActualFileName != oldEmailAttach.ActualFileName) {
				if(command!=""){ command+=",";}
				command+="ActualFileName = '"+POut.String(emailAttach.ActualFileName)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE emailattach SET "+command
				+" WHERE EmailAttachNum = "+POut.Long(emailAttach.EmailAttachNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one EmailAttach from the database.</summary>
		internal static void Delete(long emailAttachNum){
			string command="DELETE FROM emailattach "
				+"WHERE EmailAttachNum = "+POut.Long(emailAttachNum);
			Db.NonQ(command);
		}

	}
}