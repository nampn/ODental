//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class FeeSchedCrud {
		///<summary>Gets one FeeSched object from the database using the primary key.  Returns null if not found.</summary>
		internal static FeeSched SelectOne(long feeSchedNum){
			string command="SELECT * FROM feesched "
				+"WHERE FeeSchedNum = "+POut.Long(feeSchedNum);
			List<FeeSched> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FeeSched object from the database using a query.</summary>
		internal static FeeSched SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FeeSched> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of FeeSched objects from the database using a query.</summary>
		internal static List<FeeSched> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FeeSched> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<FeeSched> TableToList(DataTable table){
			List<FeeSched> retVal=new List<FeeSched>();
			FeeSched feeSched;
			for(int i=0;i<table.Rows.Count;i++) {
				feeSched=new FeeSched();
				feeSched.FeeSchedNum = PIn.Long  (table.Rows[i]["FeeSchedNum"].ToString());
				feeSched.Description = PIn.String(table.Rows[i]["Description"].ToString());
				feeSched.FeeSchedType= (FeeScheduleType)PIn.Int(table.Rows[i]["FeeSchedType"].ToString());
				feeSched.ItemOrder   = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				feeSched.IsHidden    = PIn.Bool  (table.Rows[i]["IsHidden"].ToString());
				retVal.Add(feeSched);
			}
			return retVal;
		}

		///<summary>Inserts one FeeSched into the database.  Returns the new priKey.</summary>
		internal static long Insert(FeeSched feeSched){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				feeSched.FeeSchedNum=DbHelper.GetNextOracleKey("feesched","FeeSchedNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(feeSched,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							feeSched.FeeSchedNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(feeSched,false);
			}
		}

		///<summary>Inserts one FeeSched into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(FeeSched feeSched,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				feeSched.FeeSchedNum=ReplicationServers.GetKey("feesched","FeeSchedNum");
			}
			string command="INSERT INTO feesched (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="FeeSchedNum,";
			}
			command+="Description,FeeSchedType,ItemOrder,IsHidden) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(feeSched.FeeSchedNum)+",";
			}
			command+=
				 "'"+POut.String(feeSched.Description)+"',"
				+    POut.Int   ((int)feeSched.FeeSchedType)+","
				+    POut.Int   (feeSched.ItemOrder)+","
				+    POut.Bool  (feeSched.IsHidden)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				feeSched.FeeSchedNum=Db.NonQ(command,true);
			}
			return feeSched.FeeSchedNum;
		}

		///<summary>Updates one FeeSched in the database.</summary>
		internal static void Update(FeeSched feeSched){
			string command="UPDATE feesched SET "
				+"Description = '"+POut.String(feeSched.Description)+"', "
				+"FeeSchedType=  "+POut.Int   ((int)feeSched.FeeSchedType)+", "
				+"ItemOrder   =  "+POut.Int   (feeSched.ItemOrder)+", "
				+"IsHidden    =  "+POut.Bool  (feeSched.IsHidden)+" "
				+"WHERE FeeSchedNum = "+POut.Long(feeSched.FeeSchedNum);
			Db.NonQ(command);
		}

		///<summary>Updates one FeeSched in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(FeeSched feeSched,FeeSched oldFeeSched){
			string command="";
			if(feeSched.Description != oldFeeSched.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(feeSched.Description)+"'";
			}
			if(feeSched.FeeSchedType != oldFeeSched.FeeSchedType) {
				if(command!=""){ command+=",";}
				command+="FeeSchedType = "+POut.Int   ((int)feeSched.FeeSchedType)+"";
			}
			if(feeSched.ItemOrder != oldFeeSched.ItemOrder) {
				if(command!=""){ command+=",";}
				command+="ItemOrder = "+POut.Int(feeSched.ItemOrder)+"";
			}
			if(feeSched.IsHidden != oldFeeSched.IsHidden) {
				if(command!=""){ command+=",";}
				command+="IsHidden = "+POut.Bool(feeSched.IsHidden)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE feesched SET "+command
				+" WHERE FeeSchedNum = "+POut.Long(feeSched.FeeSchedNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one FeeSched from the database.</summary>
		internal static void Delete(long feeSchedNum){
			string command="DELETE FROM feesched "
				+"WHERE FeeSchedNum = "+POut.Long(feeSchedNum);
			Db.NonQ(command);
		}

	}
}