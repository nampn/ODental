//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class OrionProcCrud {
		///<summary>Gets one OrionProc object from the database using the primary key.  Returns null if not found.</summary>
		internal static OrionProc SelectOne(long orionProcNum){
			string command="SELECT * FROM orionproc "
				+"WHERE OrionProcNum = "+POut.Long(orionProcNum);
			List<OrionProc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one OrionProc object from the database using a query.</summary>
		internal static OrionProc SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrionProc> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of OrionProc objects from the database using a query.</summary>
		internal static List<OrionProc> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<OrionProc> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<OrionProc> TableToList(DataTable table){
			List<OrionProc> retVal=new List<OrionProc>();
			OrionProc orionProc;
			for(int i=0;i<table.Rows.Count;i++) {
				orionProc=new OrionProc();
				orionProc.OrionProcNum   = PIn.Long  (table.Rows[i]["OrionProcNum"].ToString());
				orionProc.ProcNum        = PIn.Long  (table.Rows[i]["ProcNum"].ToString());
				orionProc.DPC            = (OrionDPC)PIn.Int(table.Rows[i]["DPC"].ToString());
				orionProc.DPCpost        = (OrionDPC)PIn.Int(table.Rows[i]["DPCpost"].ToString());
				orionProc.DateScheduleBy = PIn.Date  (table.Rows[i]["DateScheduleBy"].ToString());
				orionProc.DateStopClock  = PIn.Date  (table.Rows[i]["DateStopClock"].ToString());
				orionProc.Status2        = (OrionStatus)PIn.Int(table.Rows[i]["Status2"].ToString());
				orionProc.IsOnCall       = PIn.Bool  (table.Rows[i]["IsOnCall"].ToString());
				orionProc.IsEffectiveComm= PIn.Bool  (table.Rows[i]["IsEffectiveComm"].ToString());
				orionProc.IsRepair       = PIn.Bool  (table.Rows[i]["IsRepair"].ToString());
				retVal.Add(orionProc);
			}
			return retVal;
		}

		///<summary>Inserts one OrionProc into the database.  Returns the new priKey.</summary>
		internal static long Insert(OrionProc orionProc){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				orionProc.OrionProcNum=DbHelper.GetNextOracleKey("orionproc","OrionProcNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(orionProc,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							orionProc.OrionProcNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(orionProc,false);
			}
		}

		///<summary>Inserts one OrionProc into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(OrionProc orionProc,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				orionProc.OrionProcNum=ReplicationServers.GetKey("orionproc","OrionProcNum");
			}
			string command="INSERT INTO orionproc (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="OrionProcNum,";
			}
			command+="ProcNum,DPC,DPCpost,DateScheduleBy,DateStopClock,Status2,IsOnCall,IsEffectiveComm,IsRepair) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(orionProc.OrionProcNum)+",";
			}
			command+=
				     POut.Long  (orionProc.ProcNum)+","
				+    POut.Int   ((int)orionProc.DPC)+","
				+    POut.Int   ((int)orionProc.DPCpost)+","
				+    POut.Date  (orionProc.DateScheduleBy)+","
				+    POut.Date  (orionProc.DateStopClock)+","
				+    POut.Int   ((int)orionProc.Status2)+","
				+    POut.Bool  (orionProc.IsOnCall)+","
				+    POut.Bool  (orionProc.IsEffectiveComm)+","
				+    POut.Bool  (orionProc.IsRepair)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				orionProc.OrionProcNum=Db.NonQ(command,true);
			}
			return orionProc.OrionProcNum;
		}

		///<summary>Updates one OrionProc in the database.</summary>
		internal static void Update(OrionProc orionProc){
			string command="UPDATE orionproc SET "
				+"ProcNum        =  "+POut.Long  (orionProc.ProcNum)+", "
				+"DPC            =  "+POut.Int   ((int)orionProc.DPC)+", "
				+"DPCpost        =  "+POut.Int   ((int)orionProc.DPCpost)+", "
				+"DateScheduleBy =  "+POut.Date  (orionProc.DateScheduleBy)+", "
				+"DateStopClock  =  "+POut.Date  (orionProc.DateStopClock)+", "
				+"Status2        =  "+POut.Int   ((int)orionProc.Status2)+", "
				+"IsOnCall       =  "+POut.Bool  (orionProc.IsOnCall)+", "
				+"IsEffectiveComm=  "+POut.Bool  (orionProc.IsEffectiveComm)+", "
				+"IsRepair       =  "+POut.Bool  (orionProc.IsRepair)+" "
				+"WHERE OrionProcNum = "+POut.Long(orionProc.OrionProcNum);
			Db.NonQ(command);
		}

		///<summary>Updates one OrionProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(OrionProc orionProc,OrionProc oldOrionProc){
			string command="";
			if(orionProc.ProcNum != oldOrionProc.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(orionProc.ProcNum)+"";
			}
			if(orionProc.DPC != oldOrionProc.DPC) {
				if(command!=""){ command+=",";}
				command+="DPC = "+POut.Int   ((int)orionProc.DPC)+"";
			}
			if(orionProc.DPCpost != oldOrionProc.DPCpost) {
				if(command!=""){ command+=",";}
				command+="DPCpost = "+POut.Int   ((int)orionProc.DPCpost)+"";
			}
			if(orionProc.DateScheduleBy != oldOrionProc.DateScheduleBy) {
				if(command!=""){ command+=",";}
				command+="DateScheduleBy = "+POut.Date(orionProc.DateScheduleBy)+"";
			}
			if(orionProc.DateStopClock != oldOrionProc.DateStopClock) {
				if(command!=""){ command+=",";}
				command+="DateStopClock = "+POut.Date(orionProc.DateStopClock)+"";
			}
			if(orionProc.Status2 != oldOrionProc.Status2) {
				if(command!=""){ command+=",";}
				command+="Status2 = "+POut.Int   ((int)orionProc.Status2)+"";
			}
			if(orionProc.IsOnCall != oldOrionProc.IsOnCall) {
				if(command!=""){ command+=",";}
				command+="IsOnCall = "+POut.Bool(orionProc.IsOnCall)+"";
			}
			if(orionProc.IsEffectiveComm != oldOrionProc.IsEffectiveComm) {
				if(command!=""){ command+=",";}
				command+="IsEffectiveComm = "+POut.Bool(orionProc.IsEffectiveComm)+"";
			}
			if(orionProc.IsRepair != oldOrionProc.IsRepair) {
				if(command!=""){ command+=",";}
				command+="IsRepair = "+POut.Bool(orionProc.IsRepair)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE orionproc SET "+command
				+" WHERE OrionProcNum = "+POut.Long(orionProc.OrionProcNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one OrionProc from the database.</summary>
		internal static void Delete(long orionProcNum){
			string command="DELETE FROM orionproc "
				+"WHERE OrionProcNum = "+POut.Long(orionProcNum);
			Db.NonQ(command);
		}

	}
}