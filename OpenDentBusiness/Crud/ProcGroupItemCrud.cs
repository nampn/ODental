//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ProcGroupItemCrud {
		///<summary>Gets one ProcGroupItem object from the database using the primary key.  Returns null if not found.</summary>
		internal static ProcGroupItem SelectOne(long procGroupItemNum){
			string command="SELECT * FROM procgroupitem "
				+"WHERE ProcGroupItemNum = "+POut.Long(procGroupItemNum);
			List<ProcGroupItem> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ProcGroupItem object from the database using a query.</summary>
		internal static ProcGroupItem SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ProcGroupItem> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ProcGroupItem objects from the database using a query.</summary>
		internal static List<ProcGroupItem> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ProcGroupItem> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<ProcGroupItem> TableToList(DataTable table){
			List<ProcGroupItem> retVal=new List<ProcGroupItem>();
			ProcGroupItem procGroupItem;
			for(int i=0;i<table.Rows.Count;i++) {
				procGroupItem=new ProcGroupItem();
				procGroupItem.ProcGroupItemNum= PIn.Long  (table.Rows[i]["ProcGroupItemNum"].ToString());
				procGroupItem.ProcNum         = PIn.Long  (table.Rows[i]["ProcNum"].ToString());
				procGroupItem.GroupNum        = PIn.Long  (table.Rows[i]["GroupNum"].ToString());
				retVal.Add(procGroupItem);
			}
			return retVal;
		}

		///<summary>Inserts one ProcGroupItem into the database.  Returns the new priKey.</summary>
		internal static long Insert(ProcGroupItem procGroupItem){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				procGroupItem.ProcGroupItemNum=DbHelper.GetNextOracleKey("procgroupitem","ProcGroupItemNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(procGroupItem,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							procGroupItem.ProcGroupItemNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(procGroupItem,false);
			}
		}

		///<summary>Inserts one ProcGroupItem into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(ProcGroupItem procGroupItem,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				procGroupItem.ProcGroupItemNum=ReplicationServers.GetKey("procgroupitem","ProcGroupItemNum");
			}
			string command="INSERT INTO procgroupitem (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ProcGroupItemNum,";
			}
			command+="ProcNum,GroupNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(procGroupItem.ProcGroupItemNum)+",";
			}
			command+=
				     POut.Long  (procGroupItem.ProcNum)+","
				+    POut.Long  (procGroupItem.GroupNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				procGroupItem.ProcGroupItemNum=Db.NonQ(command,true);
			}
			return procGroupItem.ProcGroupItemNum;
		}

		///<summary>Updates one ProcGroupItem in the database.</summary>
		internal static void Update(ProcGroupItem procGroupItem){
			string command="UPDATE procgroupitem SET "
				+"ProcNum         =  "+POut.Long  (procGroupItem.ProcNum)+", "
				+"GroupNum        =  "+POut.Long  (procGroupItem.GroupNum)+" "
				+"WHERE ProcGroupItemNum = "+POut.Long(procGroupItem.ProcGroupItemNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ProcGroupItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(ProcGroupItem procGroupItem,ProcGroupItem oldProcGroupItem){
			string command="";
			if(procGroupItem.ProcNum != oldProcGroupItem.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(procGroupItem.ProcNum)+"";
			}
			if(procGroupItem.GroupNum != oldProcGroupItem.GroupNum) {
				if(command!=""){ command+=",";}
				command+="GroupNum = "+POut.Long(procGroupItem.GroupNum)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE procgroupitem SET "+command
				+" WHERE ProcGroupItemNum = "+POut.Long(procGroupItem.ProcGroupItemNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one ProcGroupItem from the database.</summary>
		internal static void Delete(long procGroupItemNum){
			string command="DELETE FROM procgroupitem "
				+"WHERE ProcGroupItemNum = "+POut.Long(procGroupItemNum);
			Db.NonQ(command);
		}

	}
}