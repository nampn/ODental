//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class ReqNeededCrud {
		///<summary>Gets one ReqNeeded object from the database using the primary key.  Returns null if not found.</summary>
		internal static ReqNeeded SelectOne(long reqNeededNum){
			string command="SELECT * FROM reqneeded "
				+"WHERE ReqNeededNum = "+POut.Long(reqNeededNum);
			List<ReqNeeded> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ReqNeeded object from the database using a query.</summary>
		internal static ReqNeeded SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ReqNeeded> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ReqNeeded objects from the database using a query.</summary>
		internal static List<ReqNeeded> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ReqNeeded> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<ReqNeeded> TableToList(DataTable table){
			List<ReqNeeded> retVal=new List<ReqNeeded>();
			ReqNeeded reqNeeded;
			for(int i=0;i<table.Rows.Count;i++) {
				reqNeeded=new ReqNeeded();
				reqNeeded.ReqNeededNum   = PIn.Long  (table.Rows[i]["ReqNeededNum"].ToString());
				reqNeeded.Descript       = PIn.String(table.Rows[i]["Descript"].ToString());
				reqNeeded.SchoolCourseNum= PIn.Long  (table.Rows[i]["SchoolCourseNum"].ToString());
				reqNeeded.SchoolClassNum = PIn.Long  (table.Rows[i]["SchoolClassNum"].ToString());
				retVal.Add(reqNeeded);
			}
			return retVal;
		}

		///<summary>Inserts one ReqNeeded into the database.  Returns the new priKey.</summary>
		internal static long Insert(ReqNeeded reqNeeded){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				reqNeeded.ReqNeededNum=DbHelper.GetNextOracleKey("reqneeded","ReqNeededNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(reqNeeded,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							reqNeeded.ReqNeededNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(reqNeeded,false);
			}
		}

		///<summary>Inserts one ReqNeeded into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(ReqNeeded reqNeeded,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				reqNeeded.ReqNeededNum=ReplicationServers.GetKey("reqneeded","ReqNeededNum");
			}
			string command="INSERT INTO reqneeded (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ReqNeededNum,";
			}
			command+="Descript,SchoolCourseNum,SchoolClassNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(reqNeeded.ReqNeededNum)+",";
			}
			command+=
				 "'"+POut.String(reqNeeded.Descript)+"',"
				+    POut.Long  (reqNeeded.SchoolCourseNum)+","
				+    POut.Long  (reqNeeded.SchoolClassNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				reqNeeded.ReqNeededNum=Db.NonQ(command,true);
			}
			return reqNeeded.ReqNeededNum;
		}

		///<summary>Updates one ReqNeeded in the database.</summary>
		internal static void Update(ReqNeeded reqNeeded){
			string command="UPDATE reqneeded SET "
				+"Descript       = '"+POut.String(reqNeeded.Descript)+"', "
				+"SchoolCourseNum=  "+POut.Long  (reqNeeded.SchoolCourseNum)+", "
				+"SchoolClassNum =  "+POut.Long  (reqNeeded.SchoolClassNum)+" "
				+"WHERE ReqNeededNum = "+POut.Long(reqNeeded.ReqNeededNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ReqNeeded in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(ReqNeeded reqNeeded,ReqNeeded oldReqNeeded){
			string command="";
			if(reqNeeded.Descript != oldReqNeeded.Descript) {
				if(command!=""){ command+=",";}
				command+="Descript = '"+POut.String(reqNeeded.Descript)+"'";
			}
			if(reqNeeded.SchoolCourseNum != oldReqNeeded.SchoolCourseNum) {
				if(command!=""){ command+=",";}
				command+="SchoolCourseNum = "+POut.Long(reqNeeded.SchoolCourseNum)+"";
			}
			if(reqNeeded.SchoolClassNum != oldReqNeeded.SchoolClassNum) {
				if(command!=""){ command+=",";}
				command+="SchoolClassNum = "+POut.Long(reqNeeded.SchoolClassNum)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE reqneeded SET "+command
				+" WHERE ReqNeededNum = "+POut.Long(reqNeeded.ReqNeededNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one ReqNeeded from the database.</summary>
		internal static void Delete(long reqNeededNum){
			string command="DELETE FROM reqneeded "
				+"WHERE ReqNeededNum = "+POut.Long(reqNeededNum);
			Db.NonQ(command);
		}

	}
}