//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class SchoolClassCrud {
		///<summary>Gets one SchoolClass object from the database using the primary key.  Returns null if not found.</summary>
		internal static SchoolClass SelectOne(long schoolClassNum){
			string command="SELECT * FROM schoolclass "
				+"WHERE SchoolClassNum = "+POut.Long(schoolClassNum);
			List<SchoolClass> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SchoolClass object from the database using a query.</summary>
		internal static SchoolClass SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SchoolClass> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SchoolClass objects from the database using a query.</summary>
		internal static List<SchoolClass> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SchoolClass> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<SchoolClass> TableToList(DataTable table){
			List<SchoolClass> retVal=new List<SchoolClass>();
			SchoolClass schoolClass;
			for(int i=0;i<table.Rows.Count;i++) {
				schoolClass=new SchoolClass();
				schoolClass.SchoolClassNum= PIn.Long  (table.Rows[i]["SchoolClassNum"].ToString());
				schoolClass.GradYear      = PIn.Int   (table.Rows[i]["GradYear"].ToString());
				schoolClass.Descript      = PIn.String(table.Rows[i]["Descript"].ToString());
				retVal.Add(schoolClass);
			}
			return retVal;
		}

		///<summary>Inserts one SchoolClass into the database.  Returns the new priKey.</summary>
		internal static long Insert(SchoolClass schoolClass){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				schoolClass.SchoolClassNum=DbHelper.GetNextOracleKey("schoolclass","SchoolClassNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(schoolClass,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							schoolClass.SchoolClassNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(schoolClass,false);
			}
		}

		///<summary>Inserts one SchoolClass into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(SchoolClass schoolClass,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				schoolClass.SchoolClassNum=ReplicationServers.GetKey("schoolclass","SchoolClassNum");
			}
			string command="INSERT INTO schoolclass (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SchoolClassNum,";
			}
			command+="GradYear,Descript) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(schoolClass.SchoolClassNum)+",";
			}
			command+=
				     POut.Int   (schoolClass.GradYear)+","
				+"'"+POut.String(schoolClass.Descript)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				schoolClass.SchoolClassNum=Db.NonQ(command,true);
			}
			return schoolClass.SchoolClassNum;
		}

		///<summary>Updates one SchoolClass in the database.</summary>
		internal static void Update(SchoolClass schoolClass){
			string command="UPDATE schoolclass SET "
				+"GradYear      =  "+POut.Int   (schoolClass.GradYear)+", "
				+"Descript      = '"+POut.String(schoolClass.Descript)+"' "
				+"WHERE SchoolClassNum = "+POut.Long(schoolClass.SchoolClassNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SchoolClass in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(SchoolClass schoolClass,SchoolClass oldSchoolClass){
			string command="";
			if(schoolClass.GradYear != oldSchoolClass.GradYear) {
				if(command!=""){ command+=",";}
				command+="GradYear = "+POut.Int(schoolClass.GradYear)+"";
			}
			if(schoolClass.Descript != oldSchoolClass.Descript) {
				if(command!=""){ command+=",";}
				command+="Descript = '"+POut.String(schoolClass.Descript)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE schoolclass SET "+command
				+" WHERE SchoolClassNum = "+POut.Long(schoolClass.SchoolClassNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one SchoolClass from the database.</summary>
		internal static void Delete(long schoolClassNum){
			string command="DELETE FROM schoolclass "
				+"WHERE SchoolClassNum = "+POut.Long(schoolClassNum);
			Db.NonQ(command);
		}

	}
}